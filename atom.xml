<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[One Man's Yammer]]></title>
  <link href="http://laoar.github.io/atom.xml" rel="self"/>
  <link href="http://laoar.github.io/"/>
  <updated>2017-03-27T00:01:21+08:00</updated>
  <id>http://laoar.github.io/</id>
  <author>
    <name><![CDATA[Yafang Shao]]></name>
    <email><![CDATA[laoar.shao@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[总是等到逝去时，才意识到存在]]></title>
    <link href="http://laoar.github.io/blog/2017/03/26/continue/"/>
    <updated>2017-03-26T21:17:11+08:00</updated>
    <id>http://laoar.github.io/blog/2017/03/26/continue</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>前几天我的gmail邮箱收到一封邮件：   <br/>
“你的域名即将到期，请你及时续费”</p>

<p>然后我才意识到我的博客已经很久没有更新了&hellip;</p>

<p>然后还发现我的博客排版真是惨不忍睹&hellip;</p>

<h2>接下来</h2>

<ul>
<li>整理下排版</li>
<li>更新下博客  <br/>
记录下最近技术方面的一些收获</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能优化：来龙及去脉]]></title>
    <link href="http://laoar.github.io/blog/2015/12/05/performance-tuning/"/>
    <updated>2015-12-05T22:13:55+08:00</updated>
    <id>http://laoar.github.io/blog/2015/12/05/performance-tuning</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>这是我在离开Juniper之前应manager及同事们的要求，给他们做的一个培训。
因为我是结合Juniper具体产品来写的材料，所以这里就删去了Juniper的关键信息。</p>

<h3>什么是性能优化</h3>

<ul>
<li><p>性能优化是一个理论体系，然而终究是要去解决实际问题.</p>

<ul>
<li>所以，有效的才是最好的!</li>
</ul>
</li>
<li><p>要去解决实际问题，终归还是得有理论基础</p>

<ul>
<li>Profiling Tools</li>
<li>可执行文件

<ul>
<li>文件格式</li>
<li>编译基础：gcc</li>
<li>加载执行</li>
</ul>
</li>
<li>CPU体系结构

<ul>
<li>CPU performance counter registers</li>
<li>Cache</li>
</ul>
</li>
<li>内存管理

<ul>
<li>Kernel：  Page</li>
<li>多线程： 共享内存</li>
<li>Glibc：  堆内存管理算法</li>
</ul>
</li>
<li>剩下的，都是编程语言的事了</li>
</ul>
</li>
</ul>


<h3>Profiling Tools</h3>

<ul>
<li>开发者在写代码时就意识到了这个函数对性能影响较大

<ul>
<li>所以我们自己在这些函数的入口和出口分别获取一些统计计数，就可以计算出这个函数的执行开销。</li>
<li>这样的缺点也是显而易见，用这种方法只能看这些特定的函数</li>
</ul>
</li>
<li>我们还想看其他函数的开销怎么办？

<ul>
<li>第一种策略是受限于编译时，所以只能看特定的函数，那是不是可以在运行时再去决定要profile的函数？</li>
<li>于是就有了另外一种profiling策略：首先这个函数必须得是全局符号就，然后根据这个全局符号来找到它的地址，接着把这个地址里的指令替换为我们自己的指令跳转到统计函数里，统计完后再返回原来的函数继续去执行</li>
<li>这样做显然也是有局限性的，那就是只能profile全局符号</li>
</ul>
</li>
<li>那编译时可不可以做到来profile所有的函数？

<ul>
<li>答案是有的。比如gprof这个工具，它在编译时会对所有全局函数的入口和出口处做统计。</li>
</ul>
</li>
</ul>


<h3>关于profiling tools的一些思考</h3>

<ul>
<li>要不要把profiling tool编译进最终的可执行文件？

<ul>
<li>如果要是编译进去，显然会影响性能</li>
<li>如果不。那么那么实际上这是两个不同的可执行文件，所以结果并不能真实的反应实际结果</li>
</ul>
</li>
<li>可不可以退而求其次，把它给编译进去，但是我们通过一个开关来控制它，默认关闭。

<ul>
<li>看起来，这相对于不编译进去，在运行时只是多了一个if的判断指令，一条判断语句也费不了多少时间。</li>
<li>然而，这些代码被编译为二进制后还是要占用地址空间的，从而会影响到指令预取。</li>
<li>那么，我们使用unlikely把这部分代码给放在编译到函数的最后面不就可以不影响指令预取了么？是的，但是它只是不影响这个函数内的指令预取，从全局来看，指令预取还是会受到影响。</li>
</ul>
</li>
<li>结论：鱼与熊掌不可兼得，要么要性能要么要准确性</li>
</ul>


<h3>涉及到的可执行文件的一些知识</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker背后的技术： Namespaces]]></title>
    <link href="http://laoar.github.io/blog/2015/09/04/namespace/"/>
    <updated>2015-09-04T23:04:21+08:00</updated>
    <id>http://laoar.github.io/blog/2015/09/04/namespace</id>
    <content type="html"><![CDATA[<h2>背景知识：一句话概括Docker</h2>

<p>Docker是基于Linux container的一个容器管理工具。它的作用是将应用程序给容器化，以保证在同一个Kernel上运行的应用程序的运行环境相互隔离，让容器内的这些进程觉得在这个系统里只有这些进程而感知不到其他进程的存在。与Docker容易进行比较的一种技术是KVM，KVM的作用是虚拟化，它实现一些硬件的虚拟化，这样来在一个VM里运行其他的Kernel。Docker的优点是可以快速的创建线程，并且以native的速度快速执行，高效的使用系统资源。</p>

<h4>Docker的概貌如下图</h4>

<center><img src="http://laoar.github.io/images/namespace-docker.png"> </center>


<p>Docker的原生内核是Linux，如果要在非Linux（Windows/Mac OS）上运行Docker还是得需要有VM。</p>

<h2>Docker用到的内核技术</h2>

<p>在Linux Kernel里对资源进行控制的机制是cgroup，实现资源隔离的机制是namespaces， cgroup和namespaces就是Linux container用到的两个内核机制。</p>

<h2>Namespaces背景知识：进程地址空间</h2>

<p>下图是32-bit Linux典型的地址空间分布:</p>

<center><img src="http://laoar.github.io/images/namespace-space.png"></center>


<p>如图所示，在User Space(0~3G)各个进程拥有自己独立的地址空间，它们互相看不到对方。这些进程通过Kernel API(syscall/ioctl/socket/trap&hellip;)进入Kenrel Space(3G~4G)，然后使用内核提供的服务，所有的进程共享同一个Kenrel Space。</p>

<p>这样带来的结果就是，虽然在User Space所有的进程都有独立的地址空间，互相看不到对方，然而在Kernel Space，他们是感知到其他进程存在的。</p>

<p>如何让进程在使用内核服务时感知不到其他无关进程的存在，就产生了namespaces这个技术。</p>

<h2>Namespaces：抽象，封装，多实例</h2>

<p>在内核里面有很多全局变量，比如init进程(1号进程)，比如根目录(/)，比如时钟，比如路由表，这些全局变量就是内核提供的一些全局资源。实现进程的隔离，首先要解决的就是这些全局资源问题，让各个容器内的进程都有自己独立的全局资源，即全局资源的多实例化，每个容器内都有这些全局资源的一个实例。具体到编程角度，就是将这些全局变量给封装。
比如对于根目录(/)的如下封装: (摘自Kernel-3.9)</p>

<center><img src="http://laoar.github.io/images/namespace-mnt.png"> </center>


<p>mnt_namespace是mount namespaces的抽象数据结构。mount namespaces是内核里已经实现的namespaces中的一个，它的作用是隔离挂载点(mount point), 这样一个mount namespaces里的这组进程只能看到自己的目录结构，并且把它的挂载点当作根目录，从而看不到它的挂载点之外的目录结构。这有些类似于chroot(2)这个系统调用，mount namespaces比chroot好的地方在于，chroot只是将子目录设置为应用程序的根目录(/), 在chroot的根目录下不会有系统根目录下的其他子目录，而mount namespaces则会这些子目录的一个实例。  <br/>
来看下docker的具体示例。</p>

<p>下图是在Host OS(我的Macbook的OS)里的目录结构：</p>

<center><img src="http://laoar.github.io/images/namespace-host.png"></center>


<p>然后我们在docker machine里启动一个ubuntu container，看下这个container的目录结构：</p>

<center><img src="http://laoar.github.io/images/namespace-container.png"></center>


<p> 可以看到这是一个新的目录结构。其中hostname那一项是该container的ID。
为了实现mount namespaces，mount()以及umount()这两个系统调用都要做出相应的改变。他们不再操作对所有进程均可见的全局挂载点，取而代之的是只影响跟该mount space相关的进程。</p>

<h2>Namespaces的过去，现状及未来</h2>

<p>Mount namespaces是Linux Kernel里最先出现的一个namespace，它是为了解决clone()系统调用而增加的，由于当时想不到还会有其他的namespace，所以就给mount namespaces起了一个比较通用的名字，叫做CLONE_NEWNS，即new namespace的意思。那个时候更不要说会预见到有container这种东西了。
伴随着container这个概念的产生，增加了更多的namespaces来满足需要。</p>

<ul>
<li>Network namespaces: 用来实现网络资源(网络设备，IP地址，IP路由表，端口号，等等)的隔离。</li>
<li>PID namespaces: 用来实现PID号这个资源的隔离，这样在不同的PID namespaces中可以使用同一个PID，比如每个namespace都有它自己的init进程(PID 1)，init进程是所有其他进程的祖先进程。</li>
<li>IPC namespaces: 用来隔离System V IPC标识以及Posix消息队列, 这样就使得不同Namespace之间的进程不能直接通信，就像是在不同的系统里一样</li>
<li>UTS namespaces: 用来封装uname()这个系统调用。可以虚拟出一个有独立主机名.</li>
<li>User namespaces: 用来隔离用户ID和组ID。那么这样就可以让一个用户在某个container里拥有root权限但是在整个系统里却没有root权限。</li>
</ul>


<p>我前面提到的这6个namespaces就是目前最新Linux Kernel(Kernel-4.2)里所有已实现的namespaces。由于Linux Kernel里拥有非常多的全局资源，随着越来越多应用场景的出现，每一个全局变量都有可能被封装进namespace，这就不可避免在将来会产生新的namespace，比如甚至系统时间都可能会被封装进namespace这样不同的container就会有不同的时间。由此伴随而来的一个问题就是，如何来组织这些namespaces来避免namespace种类的大爆炸以及系统复杂性的增加，这会是一个挑战。</p>

<h2>Linux的Namespaces，FreeBSD的Jails</h2>

<p>在FreeBSD上面，与Namespaces类似的机制叫做Jails。Jals具有如下一些功能：</p>

<ul>
<li>目录树  <br/>
实现效果和Linux的Mount namespaces类似。</li>
<li>主机名  <br/>
每个jail可以有自己的主机名。这类似于Linux的UTS namespaces。</li>
<li>IP地址  <br/>
分配给jail的IP地址，一个jail的IP地址通常是系统里存在的网络接口的IP地址。这类似于Linux的Network namespaces。</li>
<li>命令  <br/>
jail内部的执行路径PATH，这个路径是相对于该jail环境的根目录的。</li>
</ul>


<p>jail有自己独立的用户组和root用户，并且这些用户都限制在这个jail的内部。这类似于Linux的User namespaces。</p>

<p>所以FreeBSD的Jails和Linux的Namespaces具有类似的功能，都是为了系统虚拟化。因而Docker移植到FreeBSD上面也是有可能的。</p>

<h2>Ref</h2>

<ul>
<li><a href="https://docs.docker.com">Docker Docs</a></li>
<li><a href="https://lwn.net/Articles/531114">LWN:Namespaces in operation</a></li>
<li><a href="https://www.freebsd.org/doc/handbook/jails.html">FreeBSD Jails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD里的callwheel机制(补充前一篇)]]></title>
    <link href="http://laoar.github.io/blog/2015/08/17/callwheel/"/>
    <updated>2015-08-17T22:04:09+08:00</updated>
    <id>http://laoar.github.io/blog/2015/08/17/callwheel</id>
    <content type="html"><![CDATA[<p>FreeBSD里的定时器是基于一种callwheel机制，因为前一篇用到了timer，所以这里就简单介绍一下其基本原理。之所以单独成一篇，是由于前一篇篇幅太长了。</p>

<h2>timer</h2>

<p>来看下timer start的时候做了什么事, 在FreeBSD里timer是借助于callout API来实现的。callout是FreeBSD提供的一个kernel interface，它可以让一个函数在未来被调用。</p>

<p>在FreeBSD里面和时间有关的一些应用都会用到callout, 它在系统里面的一些应用如下：</p>

<center><img src="http://laoar.github.io/images/callwhell-callout.jpg"></center>


<p>对于callout的具体细节不在此讨论，只说一下和定时器有关的关键部分。</p>

<p>timer start函数如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">timer_start</span> <span class="p">(</span><span class="k">struct</span>  <span class="n">callout</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="p">...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>   <span class="c1">// 首先计算出超时时刻</span>
</span><span class='line'>     <span class="n">expire</span> <span class="o">=</span> <span class="n">ticks</span> <span class="o">+</span> <span class="n">delay_ticks</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">// 将该callout结构体添加到callwheel里面对应的TAILQ中</span>
</span><span class='line'>   <span class="c1">// callwheelmask是(callwheelsize - 1), 它由callout数目来决定</span>
</span><span class='line'>     <span class="n">TAILQ_INSERT_TAIL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">callwheel</span><span class="p">[</span><span class="n">expire</span> <span class="o">&amp;</span> <span class="n">callwheelmask</span><span class="p">],</span> <span class="n">c</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，该callout是通过一种hash算法(expire &amp; callwheelmask)来被添加到对应的TAILQ里面。callwheelsize是一个实验值，如果值太小的话显然会导致hash冲突比较多；而如果太大也不行，它会预先分配很多内存。所以FreeBSD Kernel Guys就采用了一个实验值，即假定一个进程（注意，在kernel里，进程和线程是没有区别的）以及一个打开的文件描述符都可以有一个callout。所以callout的最大值ncallout就被设置为了:</p>

<center>ncallout = 16 + maxproc + maxfiles; </center>


<p>callwheelsize是不大于ncallout的最大的2的幂值，比如如果ncallout是2076，那么callwheelsize就是2048。</p>

<p>callout是借助于时钟中断来实现的。</p>

<h2>hardclock</h2>

<p>首先要明白一个概念，什么是时钟中断上半部(hardclock)与时钟中断下半部(softclock).中断的上半部是不可以被打断的，它通常用来处理比较紧急且耗时短的任务；中断的下半部则是可以被打断的，它可以用来处理那些比较耗时的任务。比如timer，它就是在时钟中断的下半部处理的，即softclock里面。</p>

<p>以下代码皆摘自FreeBSD Kernel。FreeBSD Kernel时钟这部分的代码相对比较稳定，基本没有太大变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* The real-time timer, interrupting hz times per second.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="c1">// 时钟中断入口函数。1秒会有hz个中断。在BSD里面，hz默认配置的是1000或者100.</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">hardclock</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">// 每来一次中断， ticks增加1.</span>
</span><span class='line'>     <span class="n">ticks</span><span class="o">++</span><span class="p">;.</span>
</span><span class='line'>   <span class="c1">// 如果当前ticks对应的callwheel链表不为空，就说明有timer需要处理.</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">TAILQ_FIRST</span><span class="p">(</span><span class="o">&amp;</span><span class="n">callwheel</span><span class="p">[</span><span class="n">ticks</span> <span class="o">&amp;</span> <span class="n">callwheelmask</span><span class="p">])</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">need_softclock</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// 否则（所有的timer都处理完了），就&gt;让softticks跟ticks保持一致.（softticks是一直小于等于ticks的）</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">softticks</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">ticks</span><span class="p">)</span>
</span><span class='line'>          <span class="o">++</span><span class="n">softticks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">// 如果需要时钟软中断，就在这里启动。 </span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">need_softclock</span><span class="p">)</span>
</span><span class='line'>        <span class="n">swi_sched</span><span class="p">(</span><span class="n">softclock_ih</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nota bene. 往右拉可以看到全部的注释文字。</p>

<h2>softclock</h2>

<p>软时钟中断的入口函数是softclock</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">* Software (low priority) clock interrupt.</span>
</span><span class='line'><span class="cm">* Run periodic events from timeout queue.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">softclock</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dummy</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">// softticks一直小于等于ticks   </span>
</span><span class='line'>     <span class="k">while</span> <span class="p">(</span><span class="n">softticks</span> <span class="o">!=</span> <span class="n">ticks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 来记录时钟软中断数    </span>
</span><span class='line'>          <span class="n">softticks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>           <span class="cm">/*</span>
</span><span class='line'><span class="cm">            * softticks may be modified by hard clock, so cache</span>
</span><span class='line'><span class="cm">            * it while we work on a given bucket.</span>
</span><span class='line'><span class="cm">            */</span>
</span><span class='line'>          <span class="n">curticks</span> <span class="o">=</span> <span class="n">softticks</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 取出当前softticks&gt;对应的timer链表</span>
</span><span class='line'>          <span class="n">bucket</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">callwheel</span><span class="p">[</span><span class="n">curticks</span> <span class="o">&amp;</span> <span class="n">callwheelmask</span><span class="p">];</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">=</span> <span class="n">TAILQ_FIRST</span><span class="p">(</span><span class="n">bucket</span><span class="p">);</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">c_time</span> <span class="o">!=</span> <span class="n">curticks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// 保持该元素在链表里，持续的检查这个链表.</span>
</span><span class='line'>                    <span class="n">c</span> <span class="o">=</span> <span class="n">TAILQ_NEXT</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c_links</span><span class="p">.</span><span class="n">tqe</span><span class="p">);</span>
</span><span class='line'>                    <span class="o">++</span><span class="n">steps</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">steps</span> <span class="o">&gt;=</span> <span class="n">MAX_SOFTCLOCK_STEPS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                         <span class="n">nextsoftcheck</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>                         <span class="p">;</span>
</span><span class='line'>                         <span class="n">c</span> <span class="o">=</span> <span class="n">nextsoftcheck</span><span class="p">;</span>
</span><span class='line'>                         <span class="n">steps</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>               <span class="c1">// 这个timer expire了  </span>
</span><span class='line'>               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// 取下一个要判断的timer</span>
</span><span class='line'>                    <span class="n">nextsoftcheck</span> <span class="o">=</span> <span class="n">TAILQ_NEXT</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c_links</span><span class="p">.</span><span class="n">tqe</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">TAILQ_REMOVE</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">c_links</span><span class="p">.</span><span class="n">tqe</span><span class="p">);</span>
</span><span class='line'>                  <span class="c1">// 执行相应的函数</span>
</span><span class='line'>                    <span class="n">c_func</span><span class="p">(</span><span class="n">c_arg</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">c</span> <span class="o">=</span> <span class="n">nextsoftcheck</span><span class="p">;</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一张图来描述callwheel结构体，就是这个样子的：</p>

<center><img src="http://laoar.github.io/images/callwheel-struct.jpg"> </center>


<h2>ref</h2>

<ul>
<li><a href="http://people.freebsd.org/~davide/asia/callout_paper.pdf">callout paper</a></li>
<li><a href="http://lists.freebsd.org/pipermail/freebsd-arch/2013-January/013807.html">discussion on callout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RFC-2461 IPv6 NDP中NA延时的一个实现方案：异步/多实例/实时性]]></title>
    <link href="http://laoar.github.io/blog/2015/08/10/ndp/"/>
    <updated>2015-08-10T23:38:35+08:00</updated>
    <id>http://laoar.github.io/blog/2015/08/10/ndp</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>最近为了实现NDP(Neighbor Discovery Protocol)里头proxy延迟的问题，去看了一下RFC-2461，以及思考了下如果要实现Multiple instance NDP应该怎么做扩展。</p>

<h2>知识介绍</h2>

<p>在最新的<a href="https://github.com/freebsd/freebsd">iFreeBSD(FeeBSD 11.X)</a>代码里依然没有实现<a href="http://www.ietf.org/rfc/rfc2461.txt">RFC-2461</a>中规定的对于anycast或者proxy类型的NS包在回NA的时候需要一个小于1S的随机时间的延时:  <br/>
&ldquo;If the Target Address is an anycast address the sender SHOULD delay
sending a response for a random time between 0 and  MAX_ANYCAST_DELAY_TIME seconds.&rdquo;  <br/>
  其中，MAX_ANYCAST_DELAY_TIME为1 second.   <br/>
大致意思就是说，对于接受到的每一个NS包，需要回一个NA给对端。对于anycast或者proxy这种类型的包，再回NA的时候需要一个时间延迟，该延时时一个小于1S的随机时间。</p>

<p>引入延迟的主要原因是为了使代理的邻居项的优先级比其他授权的主机（例如，实际拥有Solicited L3地址的主机）的低。延迟时间是一个随机数的原因是，随机数的使用可以降低多个主机同时发出请求，并导致拥塞的可能。</p>

<p>FreeBSD的代码具体参见下面这个函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   * Neighbor advertisement input handling.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * Based on RFC 2461</span>
</span><span class='line'><span class="cm">   * Based on RFC 2462 (duplicate address detection)</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * the following items are not implemented yet:</span>
</span><span class='line'><span class="cm">   * - proxy advertisement delay rule (RFC2461 7.2.8, last paragraph, SHOULD)</span>
</span><span class='line'><span class="cm">   * - anycast advertisement delay rule (RFC2461 7.2.7, SHOULD)</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">nd6_na_input</span><span class="p">(</span><span class="k">struct</span> <span class="n">mbuf</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">off</span><span class="p">,</span> <span class="kt">int</span> <span class="n">icmp6len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Kernel里头对于延时的一个做法是借助一个timer机制：即我们启动一个定时器，给定时器设置一个超时时间，然后在定时器超时后去执行相应的操作。我们对这个场景做一些简化，只需要如下三个timer的API：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 初始化一个timer */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">timer_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 启动timer，ticks是timer多长时间超时，超时后去执行func这个函数，arg是传递给func的参数 */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">timer_start</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer</span> <span class="o">*</span><span class="n">t</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ticks</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 强制终止一个timer，用在处理异常情况 */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">timer_stop</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer</span> <span class="o">*</span><span class="n">t</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一个简单的实现</h2>

<p>然后我们假设NA要执行的函数是anycast_delay_handler, 用到的参数na_arg,.    <br/>
那么我们可以做如下一个大致实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">nd6_na_input</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">anycast</span> <span class="o">||</span> <span class="n">proxy</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="n">HZ</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">timer</span> <span class="o">*</span><span class="n">anycast_delay_timer</span><span class="p">;</span>
</span><span class='line'>        <span class="n">anycast_delay_timer</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">timer</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">timer</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">anycast</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">freeit</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">timer</span> <span class="o">=</span> <span class="n">anycast_delay_timer</span><span class="p">;</span> <span class="cm">/* need free it in the async function */</span>
</span><span class='line'>        <span class="n">jtimer_init</span><span class="p">(</span><span class="n">anycast_delay_timer</span><span class="p">);</span>
</span><span class='line'>        <span class="n">jtimer_start</span><span class="p">(</span><span class="n">anycast_delay_timer</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">anycast_delay_handler</span><span class="p">,</span> <span class="n">na_arg</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">freeit:</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">anycast_delay_handler</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">na_arg_t</span> <span class="o">*</span><span class="n">na_arg</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">na_arg_t</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>     <span class="cm">/*send out the NA packet*/</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">timer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些说明：</p>

<ol>
<li>anycast_delay_handler 是一个异步函数，即启动timer的函数nd6_na_input()不用等待该函数执行就直接返回，这也是timer的一种做法。 如果是同步函数，那就得等待该函数执行完毕后，nd6_na_input()再返回。</li>
<li>由于anycast_delay_handler是异步函数，所以这个local timer就不能分配在栈空间，必须分配在堆空间，然后在timer超时后再在anycast_delay_handler里面free掉该timer。</li>
<li>但是这种做法不太scalable，它的扩展性比较差。比如我们要想强制stop该timer就不是很好处理。通常我们都是把timer来定义为一个全局变量，而不是局部变量，然后让timer分时对处理各个任务。我们可以看到在Linux Kerrnel里头，NDP/ARP都是有一个全局的neighbor table，比如ndp_tbl, arp_tbl，也就是每个协议在内核协议栈里面都是单实例的，所以对于NDP我们最好只使用一个timer，而不是每个packet都创建一个timer。</li>
<li>HZ这个值是可以配置的，用来表示时钟中断的频率，即1S有HZ个时钟中断。在Kernel里面一般默认为100或者1000. 这里(randome() % HZ)表示最大1S的时间。</li>
</ol>


<h2>可扩展性考虑</h2>

<p>所以，为了scalable考虑，我们还是得将该timer定义为一个全局的timer。  <br/>
static struct timer anycast_delay_timer; /<em> 定义为一个static变量 </em>/    <br/>
由于timeout handler跟start timer的函数是异步的，一旦定义为全局timer后，就要面临一个异步问题：在一个新的NS包到来后前一个NS包的NA的timer可能还没有超时，那么这个新的NA包去start这个timer就会出现问题。所以我们必须把需要发送的NS包都给添加到一个链表里面，然后该timer去这个链表里面去取。
这可以借助FreeBSD的TAILQ机制来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">na_struct_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="cm">/* 放到一个TAILQ里头 */</span>
</span><span class='line'>    <span class="n">TAILQ_ENTRY</span><span class="p">(</span><span class="n">na_struct_t</span><span class="p">)</span> <span class="n">anycast_delay_list</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TAILQ_HEAD</span><span class="p">(</span><span class="n">anycast_list_</span><span class="p">,</span> <span class="n">na_struct_t</span><span class="p">)</span> <span class="n">anycast_list</span> <span class="o">=</span> <span class="n">TAILQ_HEAD_INITIALIZER</span><span class="p">(</span><span class="n">anycast_list</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">timer</span> <span class="n">anycast_delay_timer</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">boolean</span> <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* the max members in the anycast_delay_list */</span>
</span><span class='line'><span class="cp">#define ANYCAST_DELAY_MAX_LEN 64</span>
</span><span class='line'><span class="cm">/* anycast/proxy delay list length */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">anycast_delay_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">nd6_na_input</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">anycast</span> <span class="o">||</span> <span class="n">proxy</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="n">HZ</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">na_struct_t</span> <span class="o">*</span><span class="n">na_arg</span> <span class="o">=</span> <span class="n">set_na</span><span class="p">(...);</span>
</span><span class='line'>        <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">anycast_delay_len</span> <span class="o">&gt;</span> <span class="n">ANYCAST_DELAY_MAX_LEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">freeit</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">TAILQ_INSERT_TAIL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">,</span> <span class="n">na_arg</span><span class="p">,</span> <span class="n">anycast_delay_list</span><span class="p">);</span>
</span><span class='line'>        <span class="n">anycast_delay_len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">timer_running</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">timer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_delay_timer</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">anycast_delay_handler</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">anycast_delay_handler</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* once this function is executed, the tail should not be empty */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">na_arg_t</span> <span class="o">*</span><span class="n">na</span> <span class="o">=</span> <span class="n">TAILQ_FIRST</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TAILQ_REMOVE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">,</span> <span class="n">na</span><span class="p">,</span> <span class="n">anycast_delay_list</span><span class="p">);</span>
</span><span class='line'>    <span class="n">anycast_delay_len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*send out the NA packet*/</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">TAILQ_EMPTY</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="n">HZ</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* 还有NA需要send， 所以重启定时器 */</span>
</span><span class='line'>        <span class="n">timer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_delay_timer</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">anycast_delay_handler</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 没有NA了，所以NS里面可以启动定时器了 */</span>
</span><span class='line'>        <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些说明：</p>

<ol>
<li>在timeout函数的尾部判断是否需要重启定时器，这样来一个一个的处理TAILQ里面的元素</li>
<li>这个TAILQ是一个全局的链表，所以需要考虑到并行问题，在对这个链表操作时需要加锁。 这个锁的粒度有些大，可以更改的更加小粒度一些，比如只要锁住插入/删除位置即可。定时器超时函数是在软中断中执行的，它不是进程上下文，所以不能执行休眠和调度。所以在timeout函数里面访问共享数据的时候，不能使用mutex来加锁，要使用spinlock来加锁。(mutex会睡眠，spinlock则是一直忙等)</li>
<li>在往这个链表里面添加元素时，得确保这个链表不会很长，否则就导致占用太多资源，而且NA也不能及时的发送出去。所以我们得为这个链表设置一个最大长度，比如64. 如果超出这个值，就直接简单的丢弃掉这个包，这个网络处理的机制是一致的，网络太繁忙处理不过来，所以直接丢弃</li>
</ol>


<p>由于将所有的NA包都添加到了一个链表中来处理，那么就有可能导致链表很长，然后链表尾部的元素就可能花费N*delay(N为链表里面总的元素数)，这个时间就可能会远大于1s，这就跟RFC的标准不一致。所以得重新思考一个算法，使得确保这个时间小于1S。另外，由于FreeBSD/Linux是非实时的系统，所以还得考虑到这个时间误差。</p>

<h2>基于时间的考虑</h2>

<p>所谓实时操作系统是指，如果一个任务需要执行，它会立即得到执行，而不会有时间延迟。对于Linux/FreeBSD这类系统而言，任务的执行都是依赖于时钟中断引起的调度，各个任务会有自己的优先级，在调度的时候会根据优先级来选择某一个任务得到执行，而且任务必须得等到时钟中断到来才可能得到执行机会，这就导致Linux/FreeBSD是非实时的。 考虑到这个因素，anycast/proxy的delay时间最好设置为一个小于1S的随机时间，比如最大为1s * (8 / 10)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* the max members in the anycast_delay_list */</span>
</span><span class='line'><span class="cp">#define ANYCAST_DELAY_MAX_LEN 64</span>
</span><span class='line'><span class="cm">/* anycast/proxy delay list length */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">anycast_delay_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">na_struct_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">expire</span><span class="p">;</span> <span class="cm">/*这个包需要延时发送的时刻 */</span>
</span><span class='line'>    <span class="n">TAILQ_ENTRY</span><span class="p">(</span><span class="n">na_struct_t</span><span class="p">)</span> <span class="n">anycast_delay_list</span><span class="p">;</span> <span class="cm">/* 放到一个TAILQ里头 */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">TAILQ_HEAD</span><span class="p">(</span><span class="n">anycast_list_</span><span class="p">,</span> <span class="n">na_struct_t</span><span class="p">)</span> <span class="n">anycast_list</span> <span class="o">=</span> <span class="n">TAILQ_HEAD_INITIALIZER</span><span class="p">(</span><span class="n">anycast_list</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">timer</span> <span class="n">anycast_delay_timer</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">boolean</span> <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">nd6_na_input</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">anycast</span> <span class="o">||</span> <span class="n">proxy</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="n">HZ</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">na_struct_t</span> <span class="o">*</span><span class="n">na_arg</span> <span class="o">=</span> <span class="n">set_na</span><span class="p">(...);</span>
</span><span class='line'>        <span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">expire</span> <span class="o">=</span> <span class="n">ticks</span> <span class="o">+</span> <span class="n">delay</span><span class="p">;</span>
</span><span class='line'>        <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">anycast_delay_len</span> <span class="o">&gt;</span> <span class="n">ANYCAST_DELAY_MAX_LEN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">freeit</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">TAILQ_INSERT_TAIL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">,</span> <span class="n">na_arg</span><span class="p">,</span> <span class="n">anycast_delay_list</span><span class="p">);</span>
</span><span class='line'>        <span class="n">anycast_delay_len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">timer_running</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">timer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_delay_timer</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">anycast_delay_handler</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">freeit:</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">anycast_delay_handler</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span> <span class="n">__unused</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">na_arg_anycast_delay</span> <span class="o">*</span><span class="n">na_arg</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">now</span> <span class="o">=</span> <span class="n">ticks</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">TAILQ_FOREACH</span> <span class="p">(</span><span class="n">na_arg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">anycast_list</span><span class="p">,</span> <span class="n">anycast_delay_list</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">expire</span> <span class="o">&lt;</span> <span class="n">now</span><span class="p">)</span> <span class="p">{</span>  <span class="cm">/* already expired. */</span>
</span><span class='line'>            <span class="n">anycast_delay_len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="cm">/*send out the NA packet*/</span>
</span><span class='line'>             <span class="p">...</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">delay</span> <span class="o">||</span> <span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">expire</span> <span class="o">-</span> <span class="n">now</span> <span class="o">&lt;</span> <span class="n">na_arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">delay</span> <span class="o">=</span> <span class="n">na_arg</span><span class="o">-&gt;</span><span class="n">expire</span> <span class="o">-</span> <span class="n">now</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">delay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 还有NA需要send， 所以重启定时器 */</span>
</span><span class='line'>        <span class="n">timer_start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_delay_timer</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">anycast_delay_handler</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 没有NA了，所以NS里面可以启动定时器了 */</span>
</span><span class='line'>        <span class="n">timer_running</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">anycast_list_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些说明:</p>

<ol>
<li>在na_struct_t结构里增加了一个expire成员，用来记录该NA包需要被发送的时刻。</li>
<li>在timeout函数里，不是再去取TAILQ的first元素，而是去取所有expire时刻小于当前时刻的元素，即已经expire的NA，然后把它发送出去。同时找出下一个最近要发送的NA，找出它的expire时刻与当前时刻的差值，作为timer的下一个超时时间</li>
<li>ticks是FreeBSD Kernel里头表示时间的一个全局变量，类似于Linux Kernel里的jiffies</li>
</ol>


<h2>Ref</h2>

<ul>
<li><a href="https://github.com/freebsd/freebsd">FreeBSD</a></li>
<li><a href="http://www.ietf.org/rfc/rfc2461.txt">RFC-2461</a></li>
<li><a href="https://github.com/torvalds/linux">Linux Kernel</a></li>
<li>深入理解Linux网络技术内</li>
<li>深入理解Linux内核</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lock-free、网络吞吐量性能、并发及其他]]></title>
    <link href="http://laoar.github.io/blog/2015/06/14/lock-free/"/>
    <updated>2015-06-14T21:57:38+08:00</updated>
    <id>http://laoar.github.io/blog/2015/06/14/lock-free</id>
    <content type="html"><![CDATA[<p>前段时间尝试更改我们系统里的并发实现，用lockfree来实现了一遍以提升网络吞吐量。在这个过程中遇到了一些很有趣的技术细节，在这里记录一下。</p>


<p>公司业务不便多说，我就借助dpdk的packet processing模型来说明一下。下图摘自dpdk.org。</p>


<center> <img src="http://laoar.github.io/images/lockfree-dpdk.jpg"> </center>


<p>如上图所示，是一个典型的packet processing模型，RX这个线程接受到数据包后送给distributor，然后Worker Lcore这些线程从Distributor那里获取数据包来处理。和本次讨论无关的技术不在此阐述，我将其简化为更加清晰明了的下图。
</p>


<center> <img src="http://laoar.github.io/images/lockfree-ring.jpg"> </center>


<p>
我们的问题简化为如下：已知ring buffer是一个大小为2048 * sizeof(long)的数组, 有一个RX线程往ring buffer里面保存mbuf的地址，有N个worker线程来从ring buffer里面获取mbuf的地址。在这种场景下如何来实现一个lock-free的buffer？ 
</p>


<p>
在<a href="http://www.linuxjournal.com/content/lock-free-multi-producer-multi-consumer-queue-ring-buffer">Linux Journal</a>上有一个现成的实现，不过很可惜，虽然他的方案很巧妙，但是存在一个bug，稍后会解释这个bug。
</p>


<p>
下面是一个简短实现这个lock-free ring的一段代码，我借鉴了linux journal上的那篇文章。具体的实现细节以及原理我不再描述，那篇文章描述的很详细，浅显明了。我在这里只解析它里面的那个bug。
</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ptr_array_</span><span class="p">[</span><span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">T</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="n">ptr_array_</span><span class="p">[</span><span class="n">thr_pos</span><span class="p">().</span><span class="n">tail</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">];</span>
</span><span class='line'>    <span class="n">thr_pos</span><span class="p">().</span><span class="n">tail</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
上面这两段代码均应该在那两个语句之间添加barrier，即：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm"> * &quot;memory&quot; hints the compiler that it will touch the memory address,</span>
</span><span class='line'><span class="cm"> * so the instructions before and after it should not be reordered.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define barrier() asm volatile(&quot;&quot;:::&quot;memory&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ptr_array_</span><span class="p">[</span><span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">barrier</span><span class="p">();</span>
</span><span class='line'>    <span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">T</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="n">ptr_array_</span><span class="p">[</span><span class="n">thr_pos</span><span class="p">().</span><span class="n">tail</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">];</span>
</span><span class='line'>    <span class="n">barrier</span><span class="p">();</span>
</span><span class='line'>    <span class="n">thr_pos</span><span class="p">().</span><span class="n">tail</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
否则它就可能会被编译器（gcc）给优化为比如如下：<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">register</span>  <span class="n">tmp</span> <span class="o">=</span> <span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">;</span>
</span><span class='line'><span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>
</span><span class='line'><span class="n">ptr_array_</span><span class="p">[</span><span class="n">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
之所以做这个优化，是因为计算机的空间相近性原则，编译器会尽量将临近内存操作给放在一起以提高cache的命中率。
对于共享内存模型的这种并发，C语言的编译器并不去关心哪些变量是共享的，它只是依据局部最优性原则来做优化。所以对于C程序员而言，在实现基于共享内存模型的这种并发时，C编译器的这种优化是很大的一个挑战， 它可能会引入一些很难以定位的bug。所以，用C来实现并发，尤其是lockfree的并发，是一个非常需要经验的技术活。
</p>


<p>
好在instruction reordering 这种bug是可见的，我们可以通过反汇编来发现这种bug。如下是有无barrier的一段反汇编代码对比（注：以下反汇编直接引自我在我们系统里的实现，跟上面代码有出入，但这不重要）：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//1. 无barrier    </span>
</span><span class='line'>   <span class="mo">0064001</span><span class="n">b</span> <span class="n">divu</span> <span class="n">zero</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">a0</span>
</span><span class='line'>    <span class="mf">008001f</span><span class="mi">4</span> <span class="n">teq</span> <span class="n">a0</span><span class="p">,</span><span class="n">zero</span><span class="p">,</span><span class="mh">0x7</span>
</span><span class='line'>    <span class="mo">00001010</span> <span class="n">mfhi</span> <span class="n">v0</span>
</span><span class='line'>    <span class="mo">000210</span><span class="mi">80</span> <span class="n">sll</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class='line'>    <span class="mo">004</span><span class="n">a1021</span> <span class="n">addu</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">t2</span>
</span><span class='line'>    <span class="n">ac400044</span> <span class="n">sw</span> <span class="n">zero</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span>     <span class="err">#</span> <span class="n">ring_buf</span><span class="p">.</span><span class="n">pkt</span><span class="p">[</span><span class="n">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aceb0014</span> <span class="n">sw</span> <span class="n">t3</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>       <span class="err">#</span> <span class="n">ring_buf</span><span class="o">-&gt;</span><span class="n">thr_read</span><span class="p">[</span><span class="n">hwt_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//2. 有barrier</span>
</span><span class='line'>    <span class="n">aceb0014</span> <span class="n">sw</span> <span class="n">t3</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>     <span class="err">#</span> <span class="n">ring_buf</span><span class="o">-&gt;</span><span class="n">thr_read</span><span class="p">[</span><span class="n">hwt_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="mo">0064001</span><span class="n">b</span> <span class="n">divu</span> <span class="n">zero</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">a0</span>
</span><span class='line'>    <span class="mf">008001f</span><span class="mi">4</span> <span class="n">teq</span> <span class="n">a0</span><span class="p">,</span><span class="n">zero</span><span class="p">,</span><span class="mh">0x7</span>
</span><span class='line'>    <span class="mo">00001010</span> <span class="n">mfhi</span> <span class="n">v0</span>
</span><span class='line'>    <span class="mo">000210</span><span class="mi">80</span> <span class="n">sll</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class='line'>    <span class="mo">004</span><span class="n">a1021</span> <span class="n">addu</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">t2</span>
</span><span class='line'>    <span class="n">ac400044</span> <span class="n">sw</span> <span class="n">zero</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span>  <span class="err">#</span> <span class="n">ring_buf</span><span class="p">.</span><span class="n">pkt</span><span class="p">[</span><span class="n">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</p>


<p>
instruction reordering引入的bug虽然挺折磨人，但毕竟是可见的。在并行程序里面还有一类bug则是完全不可见的，那就是memory reordering问题，这一类问题不仅仅是技术活了，更是意识活。在X86上，一般不会有memory reordering问题，因为它是strong order的，cache一致性做的比较好。但是在MIPS／ARM这种weak order的CPU上，memory reordering问题就比较突出，他们的cache一致性做的比较差，所以就需要显示的使用sync指令来保证cache的一致性，即通过软件来弥补硬件的不足。
</p>


<p>
同样是上面这个例子：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ptr_array_</span><span class="p">[</span><span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">&amp;</span> <span class="n">Q_MASK</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>  <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">语句</span><span class="n">A</span>
</span><span class='line'>    <span class="n">barrier</span><span class="p">();</span>
</span><span class='line'>    <span class="n">thr_pos</span><span class="p">().</span><span class="n">head</span> <span class="o">=</span> <span class="n">ULONG_MAX</span><span class="p">;</span>         <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">语句</span><span class="n">B</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
虽然加了barrier，确保了语句A一定会在语句B之前得到执行，但是如果ptr_array_[]和thr_pos().head不在同一个cache line里面，就有可能存在thr_pos().head先被同步到内存，ptr_array_[]后被同步到内存的情况，那么在这个时间空窗内，thr_pos().head已经被更新，它的previous value就可以被其他CPU使用，就会导致该CPU还没有写入其他CPU就从ptr_array_[thr_pos().head & Q_MASK] 里读数据的情况，这自然会导致错误。如下图所示：<br>
<center> <img src="http://laoar.github.io/images/lockfree-cache.jpg"> </center>
另外，在共享内存模型中关于lockfree算法的必备基本功是对atomic的认识。atomic是针对内存操作而言的，我们可以这样认为，如果一个语句对于同一个内存只访问一次，我们就认为它是atomic的。如果需要访问多次该内存，我们就得借助编译器或者操作系统提供的atomic函数来访问。
</p>


<p>
以下是一些简单的例子来说明一下：<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mf">1.</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 之所以用&amp;，是说这是个内存。同时，有了&amp;后，编译器不会将其优化为register变量。</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x12345678</span><span class="p">;</span> <span class="o">&lt;&lt;&lt;</span>
</span></code></pre></td></tr></table></div></figure>
对于32-bit CPU而言，它无法用一条语句来操作32bit的立即数，因为机器码只有32bit。所以它会做如下拆分（MIPS）：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">3</span><span class="n">c027fff</span>    <span class="n">lui</span> <span class="n">v0</span><span class="p">,</span><span class="mh">0x1234</span>
</span><span class='line'><span class="mi">344</span><span class="n">bffff</span>    <span class="n">ori</span> <span class="n">t3</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x5678</span>
</span><span class='line'><span class="mo">00</span><span class="mi">804821</span>    <span class="n">sc</span>    <span class="n">t3</span><span class="p">,</span><span class="mi">12</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span> <span class="err">#请不要在意为什么这里是</span><span class="mi">12</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
虽然这条语句被编译为了3条指令，但是它只有一次内存访问，所以这个语句是原子的。即，内存写操作是原子的。同样，内存读操作也是原子的。
</p>


<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mf">2.</span>
</span><span class='line'>    <span class="k">volatile</span>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>   <span class="o">&lt;&lt;&lt;</span>
</span></code></pre></td></tr></table></div></figure>
虽然这里会访问两次内存操作，读x时要访问x所在的内存，写y时要访问y所在内存。但是它只访问一次y，所以对于y内存而言，是原子的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">lw</span> <span class="n">v0</span><span class="p">,</span> <span class="mi">12</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>    <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">读取变量</span><span class="n">x</span>
</span><span class='line'><span class="n">sw</span> <span class="n">v0</span><span class="p">,</span> <span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>   <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">存储给</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>
12(sp)和16(sp)是不同的内存地址，所以这条语句对于y而言是原子的。PS：如果还需要保证写入y之前x不被改写，那就要借助atomic_write函数了。
</p>


<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mf">3.</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">++</span><span class="p">;</span>   <span class="o">&lt;&lt;&lt;</span>
</span></code></pre></td></tr></table></div></figure>
对于这条语句而言，首先它会从内存中取出x，然后做加法运算，最后将运算结果写入到内存。如下汇编：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span> <span class="mi">12</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>  <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">第一次内存访问</span>
</span><span class='line'><span class="n">add</span> <span class="n">v0</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="n">sw</span> <span class="n">v0</span><span class="p">,</span> <span class="mi">12</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>  <span class="o">&lt;&lt;&lt;&lt;</span> <span class="err">第二次内存访问</span>
</span></code></pre></td></tr></table></div></figure>
那么这条x++这条语句就不是原子的，所以就得使用atomic_add()来操作x。
</p>


<p>
简单的说，对于所有需要算数运算的操作，它都不是原子的。PS：只指对内存变量做算数运算
</p>




<h3>Ref:</h3>


<ol>
<li>我自己写的一个Single-Writer Multi-Reader lockfree的代码 <br>
<a href="https://github.com/laoar/Single-Writer-Mul-Reader-lock-free-ring">Single-Writer Multi-Reader lockfree Ring</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open vSwitch datapath浅析]]></title>
    <link href="http://laoar.github.io/blog/2015/04/27/open-vswitch/"/>
    <updated>2015-04-27T21:43:46+08:00</updated>
    <id>http://laoar.github.io/blog/2015/04/27/open-vswitch</id>
    <content type="html"><![CDATA[<p>下图所示是Open vSwitch的组成(摘自Open vSwitch官网):<br></p>

<center><img src="http://laoar.github.io/images/main-comp.png"></center>


<p>它分为Kernel部分和User部分。<br></p>

<h3>一 安装驱动</h3>


<p>Kerenl部分是从Linux 2.6.32开始何如内核，默认是编译为一个KO，位于/lib/modules/`uname –r`/kernel/net/openvswitch/openvswitch.ko。<br></p>

<center><img src="http://laoar.github.io/images/switch-kernel.png"></center>


<p>应用open vswitch首先要做的就是install这个kernel module。需要注意，GRE Tunneling的支持需要gre.ko, VXLAN的支持需要vxlan.ko, 这两个KO都位于/lib/modules/`uname –r`/kernel/路径下。<br></p>

<p>user部分是有两个daemon，一个是ovs-vswitchd，用来管理datapath，另外一个是ovsdb-server，用来维护一个数据库。<br>
<h3>二 初始化dbserver </h3>
在install好openvswitch.ko后，我们接着需要初始化这个ovsdb-server：<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">opendb</span><span class="o">-</span><span class="n">server</span> <span class="o">--</span><span class="n">remote</span><span class="o">=</span><span class="n">punix</span><span class="o">:/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">openvswitch</span><span class="o">/</span><span class="n">db</span><span class="p">.</span><span class="n">sock</span> \
</span><span class='line'>            <span class="o">--</span><span class="n">remote</span><span class="o">=</span><span class="n">Open_vSwitch</span><span class="p">,</span><span class="n">Open_vSwitch</span><span class="p">,</span><span class="n">manager_option</span> <span class="err">\</span>
</span><span class='line'>            <span class="o">--</span><span class="n">pidfile</span> <span class="o">--</span><span class="n">detach</span>
</span></code></pre></td></tr></table></div></figure>
              此时会生成一个数据库文件（/usr/local/etc/conf.db）,该dbserver会将网络状态信息给记录到conf.db里面。这些网络状态使得open vswitch能够适应网络的动态变化，比如可以用来追踪VM的迁移。<br>
这个dbserver还可以通过TCP的6632端口跟远端的openflow server进行通信，这个openflow server可以通过remote这个参数来指定。<br>
</p>




<h3>三 启动ovs－vswitchd</h3>


<p>接下来就需要启动ovs-vswitchd：<br>
<center>ovs-vswitchd &#8211;pidfile &#8211;detach </center>
整个OVS的核心就是这个ovs-vswitchd。<br>
这样子open vswich就在PC上运行起来了。</p>




<h3>四 构建网络拓扑</h3>


<p>我们来构建如下图所示的一个网络拓扑：<br>
<center> <img src="http://laoar.github.io/images/switch-topo.png"> </center>
</p>


<h4>1. 首先需要增加一个bridge(br0)</h4>


<p>
<center>ovs-vsctl add-br br0</center>
执行这个命令后，<br>
1.1 将br0记录到ovsdb里面<br>
1.2 ovs-vswitchd创建一个新的bridge<br>
1.3 ovs-vswitchd通过netlink这种方式，发相应的cmd给kernel，执行对应的handler来生成一个datapath以及和其相关的一些结构体。<br>
每个bridge都对应于一个datapath结构体。<br>
</p>


<h4>2. 接着来将网络结构设备连接到该bridge</h4>


<p>
<center>ovs-ctl add-port br0 eth1 </center>
执行这个命令后，<br>
2.1  将该信息记录到ovsdb <br>
2.2  ovs-vswitchd在bridge上新增一个端口，并将其设置为混杂模式（NETDEV_PROMISC），设置为混杂模式的目的是为了接收非本机MAC地址的包 <br>
2.3  ovs-vswitchd通过netlink调用到kernel端的handler，此时：<br>
i. 找到“eth1”对应的net_device <br>
ii.  把该net_device的handler替换为ovs的handler，这样net_device的进包就不会进入普通的内核处理流程，而是由OVS接收过来处理。<br>
iii. 产生一个新的vport结构体<br>
整个过程如下图所示：<br>
<center><img src="http://laoar.github.io/images/switch-handler.png"></center>
至此，就初始化完成了kernel module的主要结构体datapath/vport/flow_table。这些主要结构体的关系如下图所示：<br>
<center><img src="http://laoar.github.io/images/switch-struct.png"> </center>
</p>


<h4>3. 设置openflow server </h4>


<p>下面这个命令可以用来设置远端用来和ovs-vswitchd通信的openflow server：<br>
<center>ovs-vsctl set-controller br0 tcp:XXX.XXX.XXX.XXX:6633</center>
如下图所示：<br>
<center><img src="http://laoar.github.io/images/switch-controller.png"> </center>
根据不同的设备类型，ovs实现了不同的vport以作支持。目前OVS共支持了6种vport：<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">A</span><span class="p">.</span> <span class="n">Network</span> <span class="n">device</span> <span class="o">:</span> <span class="n">tap</span> <span class="o">&amp;</span> <span class="n">system</span> <span class="n">device</span>
</span><span class='line'><span class="n">B</span><span class="p">.</span> <span class="n">Network</span> <span class="n">device</span> <span class="n">implemented</span> <span class="n">by</span> <span class="n">datapath</span><span class="o">:</span> <span class="n">internal</span> <span class="n">device</span>
</span><span class='line'><span class="n">internal</span> <span class="n">device</span><span class="err">存在的目的是为了给</span><span class="n">bridge</span><span class="err">分配</span><span class="n">IP</span><span class="err">地址。</span>
</span><span class='line'><span class="n">C</span><span class="p">.</span> <span class="n">GRE</span> <span class="n">tunnel</span>
</span><span class='line'><span class="n">D</span><span class="p">.</span> <span class="n">GRE64</span> <span class="n">tunnel</span>
</span><span class='line'><span class="n">E</span><span class="p">.</span> <span class="n">VXLAN</span> <span class="n">tunnel</span>
</span><span class='line'><span class="n">F</span><span class="p">.</span> <span class="n">LISP</span> <span class="n">tunnel</span>
</span></code></pre></td></tr></table></div></figure>
</p>


<h3>五 以ping为例子来看下包处理流程.</h3>


<p>VM0来ping VM1. </p>


<p>当vm0以ping发送一个ICMP报文给OVS时，OVS会依次进行如下处理：</p>


<h4>1 ping</h4>


<p>VM0发送报文到tap0， tap0和br0的一个端口相连。br0的端口对应一个vport结构体。</p>


<p></p>

<h4>2 ovs receive</h4>


<p>ovs执行tap0的receive handler，（即在前面执行ovs-ctl add-port br0 eth1 tag=XXX时注册的那个handler）<br>
     tag=XXX就是vlan，通过vlan来实现网络隔离的功能。</p>


<h4>3 flow key</h4>


<p>从sk_buff中解析出来L2～L4的信息生成一个flow_key.<br> 
          flow可以理解为一个以太网包所包含的头部信息的集合，在一个flow table里面的一个flow必须是唯一的，它是包含L2/L3/L4这些头部的一个细粒度的实体。一个TCP连接由两个flow组成，每个方向上有一个。<br>
<center><img src="http://laoar.github.io/images/switch-flow-key.png"></center>
</p>


<h4>4 flow lookup</h4>


<p>
使用该key来执行flow_lookup, 去跟kernel module里面维护的flow table进行比较。<br>
首先去跟 flow_table里的 mask_cache数组进行比较， mask_cache里面只有 sk_buff的 hash值所以很快速；接着再去跟 mask_array这个数组进行比较，这个数组里面存放是的 sw_flow_key, 查找相对慢一些。如果在 mask_array里面匹配到了这个 flow，就会把该 sk_buff的 hash值给放到 mask_cache里面。 在 kenerl里的这部分比较称之为 ovs的 fast path<br>
<center><img src="http://laoar.github.io/images/switch-path.png"> </center>
</p>


<h4>5 flow action</h4>


<p>
如果在kernel中查找到了对应的flow entry，就去执行对应的flow action。<br>
这些action是告诉datapath怎么去处理flow里面的这些packets。<br>
action也可以为空，即丢弃这些packets。<br>
datapath的这些action跟openflow定义的action是一致的。<br>
</p>


<h4>6 send upcall</h4>


<p> 如果没有match到，就执行upcall通过netlink的方式给ovs-vswitchd发送OVS_PACKET_CMD_MISS命令。<br>
UPCALL会包含整个packet，虽然不必要拷贝整个的packet给user space，可以做一些优化，但是由于只是拷贝first packet（比如TCP SYN），所以这种优化意义不大，而且有时候可能真的会用到整个packet。 <br>
ovs-vswitch一次只处理一个upcall，为了能够让每一个port产生的upcall都能够得到即使处理，datapath是采用的round robin这种方式来让每个port发送upcall。<br>
UPCALL发送出去后，dadapath的处理就结束了。<br>
一个普通的UPCALL结构如下图所示。<br>
<center><img src="http://laoar.github.io/images/switch-upcall.png"></center>
</p>


<h4>7 handle upcall </h4>


<p>
ovs-vswitchd执行read_upcalls来读取upcall。<br>
 read_upcalls的主要处理流程如下图所示。<br>
<center><img src="http://laoar.github.io/images/switch-routine.png"> </center>
Hash bucket的数据结构是hmap，如下图所示<br>
<center><img src="http://laoar.github.io/images/switch-hmap.png"></center>
</p>


<h4>8 flow table match</h4>


<p>
在userspace维护着openflowtable。对hmap里面的flow以wildcard的方式来与openflowtable匹配。<br>
Openflowtable的匹配过程大致如下图。<br>
<center><img src="http://laoar.github.io/images/switch-flow-table.png"> </center>
</p>


<h4>9 MAC learning</h4>


<p>
在open vswitch里面配置MAC learning功能<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ovs</span><span class="o">-</span><span class="n">ofctl</span> <span class="n">add</span><span class="o">-</span><span class="n">flow</span> <span class="n">br0</span> <span class="err">\</span>
</span><span class='line'>  <span class="s">&quot;table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], \</span>
</span><span class='line'><span class="s">    NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \</span>
</span><span class='line'><span class="s">    load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]), \  </span>
</span><span class='line'>    <span class="n">resubmit</span><span class="p">(,</span><span class="mi">3</span><span class="p">)</span><span class="err">“</span>
</span></code></pre></td></tr></table></div></figure>
<center><img src="http://laoar.github.io/images/switch-learning.png"> </center>
</p>


<p>Ref：<br>
•Openflow spec 1.4.0<br>
<a href="https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf">https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf</a> <br>
•Open vswitch 2.3.1<br>
<a href="http://openvswitch.org/releases/openvswitch-2.3.1.tar.gz">http://openvswitch.org/releases/openvswitch-2.3.1.tar.gz</a><br>
•Why OVS ?<br>
<a href="https://github.com/openvswitch/ovs/blob/master/WHY-OVS.md">https://github.com/openvswitch/ovs/blob/master/WHY-OVS.md</a> <br>
•Example<br>
<a href="http://openvswitch.org/support/config-cookbooks/">http://openvswitch.org/support/config-cookbooks/</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译器输出函数的算法对性能的影响]]></title>
    <link href="http://laoar.github.io/blog/2015/03/31/algorithm/"/>
    <updated>2015-03-31T21:31:53+08:00</updated>
    <id>http://laoar.github.io/blog/2015/03/31/algorithm</id>
    <content type="html"><![CDATA[<p>对于这个问题的研究也是缘于我们firewall的UDP吞吐量的波动。</p>


<p>在之前讨论过通过Makefile，链接脚本和gcc的attribute属性来控制编译器输出函数的顺序。然而在做了这些工作后，依然存在无关代码commit后引起性能波动的诡异现象，在对比了不同版本的二进制文件后发现有些commit会引起函数顺序的重排，这些重排就容易造成性能的波动。于是我就开始了做这个方面的研究，来分析编译器是如何调整函数顺序的以及能否进行优化。</p>


<p>首先，要明白一个概念：call-graph。</p>


<h3>一 什么是call-graph</h3>


<p>call graph是用来表示函数调用关系的一个有向图。</p>


<p>我们可以通过gprof来获取一个函数的call graph，gprof是在函数运行过程中来获取函数调用关系（所以不会被执行到的函数就不会出现在call graph中）。</p>


<p>如下是一个简单的示例：<br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">foo</span><span class="p">();</span>
</span><span class='line'>    <span class="n">bar</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么对应的call graph就是<br>
<img src="http://laoar.github.io/images/algo.png"><br>
在call-graph里，函数称为节点（node），比如func/foo/bar就是节点；一个调用称为边（edge），比如func指向foo的那个边。这跟图论是一致的。<br></p>

<h3>二 top level function</h3>


<p>还需要明白一个概念：top level function。</p>


<p>接着前面的示例代码片段，我们加上main函数组成一个完整的程序。</p>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">run</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">p</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时func()这个函数就是一个top level函数，即没有函数直接来调用的函数。<br></p>

<p>对于这一类的函数，由于没有函数来直接调用它，因而在函数的入口处就没有必要保存寄存器信息。 我们可以使用__toplevel这个属性来显示的告诉编译器这是一个top level function。</p>


<center>void func() __toplevel; </center>


<h3>三 编译器输出函数的顺序是怎么样的</h3>


<p>我们来看下gcc的源码</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">compile</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>     <span class="n">output_asm_statements</span> <span class="p">();</span>
</span><span class='line'>     <span class="n">expand_all_functions</span> <span class="p">();</span>
</span><span class='line'>     <span class="n">varpool_output_variables</span> <span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些解释：<br>
1. asmstatements function<br>
   这是Basic Asm (Assembler Instructions Without Operands),比如：<br>
      #define DebugBreak() asm(&#8220;int $3&#8221;) 
</p>


<p>2. Varpool variables<br>
     这个是所有的静态变量
</p>


<p>3. expand_all_functions 是输出函数的主体，这个是我们接下来要关注的。</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">expand_all_functions</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>     <span class="k">struct</span> <span class="n">cgraph_node</span> <span class="o">**</span><span class="n">order</span> <span class="o">=</span> <span class="n">XCNEWVEC</span> <span class="p">(</span><span class="k">struct</span> <span class="n">cgraph_node</span> <span class="o">*</span><span class="p">,</span> <span class="n">cgraph_n_nodes</span><span class="p">);</span>     <span class="c1">// 首先申请一块内存用来存储call graph里面所有的节点信息</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>     <span class="n">ipa_reverse_postorder</span> <span class="p">(</span><span class="n">order</span><span class="p">);</span> <span class="c1">// 以reverse post-ordering的方式来遍历整个call graph，并将遍历结果存储在order里面</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">new_order_pos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 从最后一个元素往前依次输出所有的函数。 </span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>          <span class="n">expand_function</span> <span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是以revserse preodering方式来深度优先遍历call-graph，然后以这个顺序的逆序输出，即以bottom-up的方式来输出call-graph里面的node。<br></p>

<h3>四 编译器以这个顺序来输出函数的目的是什么</h3>


<p>编译器没有按照函数在文件里面的先后顺序输出，而是基于call graph输出。这样做是因为，子程序和他们的调用者在时间上可能相互接近，因此应当在放置时使得他们在空间上互不冲突，所以将子程序放在他们的调用者附近以减少页交换，并且使得频繁使用的和有关联的子程序在icache中以相互之间冲突较小的方式放置。 </p>


<p>还要注意，它是以bottom-up的顺序输出，而不是按照top-down的顺序输出，这也说明，这样做优化的目的没有考虑函数的先后顺序，为什么不按照函数的调用顺序来输出呢？比如a调用b，那么就把b放在a的后面，这样在执行a的时候就把b给预取到内存不是很好么。事实上，预取是以cache line为单位的，一个cache line的大小是128字节或者64字节或者32字节，而函数的大小远不止这么大，函数调用时会有地址跳转，因而按照调用顺序来放置意义不是太大。
</p>


<p>以bottom-up的方式来遍历call-graph也是基于一次遍历的考虑，这样可以在遍历call-graph的每一个节点时就可以采用合理的策略来分配寄存器。比如，在main函数里面使用的寄存器，只有在保存后才可以被它的子程序使用；相反，所有leaf functoin可以使用相同的寄存器，因为这些leaf function不会同时执行（单线程情况）。以bottom-up方式输出，那么在函数调用时，callee使用的寄存器是已知的因为callee已经被处理过了，通过避免重复使用这些寄存器就可以避免save/restore。</p>


<p>科普一些基本知识。
在有函数调用时，编译器将寄存器分为三类：<br>
1> callee-saved registers.<br>
这些寄存器要求在函数调用时，由被调用者来保存<br>
2> caller-saved registers.<br>
这些寄存器要求在函数调用时，由调用者来保存<br>
3> 4个参数传递寄存器<br>
在函数调用时用来传递参数<br>
比如对于MIPS而言，s0~s7是callee-saved, t0~t9是caller-saved，a0~a3是传递参数的寄存器.</p>

<h3>五 这种输出顺序是否可以控制</h3>


<p>通过源码我们可以发现在compile()这个函数里，有个flag可以决定是以自然顺序输出函数还是以优化顺序输出函数。
</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">compile</span>
</span><span class='line'>  <span class="nf">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag_toplevel_reorder</span><span class="p">)</span>
</span><span class='line'>    <span class="n">output_in_order</span> <span class="p">();</span>    <span class="c1">// 这里以函数在文件中出现的顺序输出。</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">output_asm_statements</span> <span class="p">();</span>
</span><span class='line'>      <span class="n">expand_all_functions</span> <span class="p">();</span>
</span><span class='line'>      <span class="n">varpool_output_variables</span> <span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个flag就是通过-fno-toplevel-reorder 来控制的。这个选项是在gcc-4.1加入的，这个选项加入的目的是为了支持以前存在的依赖特定顺序的代码（参见gcc-4.1的release note）。<br></p>

<h3>六 使用-fno-toplevel-reorder的坏处</h3>


<p>使用这个选项后，gcc将按照函数在文件中出现的顺序输出，这可能会降低程序的性能，但是如果我们使用了attribute 来将热点函数给放到了一起，那么gcc的reorder对性能的影响就不是太大了，甚至gcc的reorder可能会降低程序的性能（这也说明gcc在这方面的优化做的还有待改进）。</p>


<p>使用这个选项后一个比较明显的坏处是，那些未被使用的static变量将仍然存在于最终生成的程序中，而如果不使用这个选项这些冗余的static变量会自动的被编译器给删除。</p>


<p>那些在程序中没有调用的函数，在call-graph中称为不可达的节点，他们跟这个选项无关，不论这个选项使用与否都会被删除。</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">finalize_compilation_unit</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>     <span class="cm">/* Gimplify and lower all functions, compute reachability and</span>
</span><span class='line'><span class="cm">          remove unreachable nodes.  */</span>
</span><span class='line'>       <span class="n">analyze_functions</span> <span class="p">();</span>     <span class="c1">// 在这里会分析这些call graph里面的所有节点，从而将不可达节点删除</span>
</span><span class='line'>       <span class="p">...</span>
</span><span class='line'>       <span class="n">compile</span><span class="p">();</span>
</span><span class='line'>       <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>七 未完待续</h3>


<p>对于编译器分配寄存器这一块，我的研究还不够深入，有些地方也不能很清楚的解释细节，这有些惭愧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Linux内核网络栈源代码情景分析》读后感]]></title>
    <link href="http://laoar.github.io/blog/2015/02/28/comments/"/>
    <updated>2015-02-28T22:44:50+08:00</updated>
    <id>http://laoar.github.io/blog/2015/02/28/comments</id>
    <content type="html"><![CDATA[<p>源自我的豆瓣日记：<a href="http://book.douban.com/review/7370625/">不需要读第二遍的书</a></p>

<p>不需要读第二遍不是说这本书很烂，而是，它的内容确实不需要读第二遍，读一遍就够了，没有需要反复咀嚼的知识.</p>


<p>
　　<p>这本书描述协议栈的视角很独辟蹊径，很适合学习网络协议栈入门时先翻一翻。它纯粹是从源码的角度来讲解协议栈，因为网络协议栈本身的分层设计就是为了简洁，所以它同样为了简洁明了，也从网络分层的角度来讲解，这就给入门者提供了一个快速切入的视角，能够从宏观上理解整个协议栈到底是怎么一回事。而且它选用的内核版本是1.2.13，源代码都是网络协议栈最核心的部分，比较容易梳理。</p>
　　<p>我重点看了这本书里对arp.c,ip.c,ip_fw.c,tcp.c这几个文件的讲解，很不出意外的是，这本书里面出现了一些错误。比如，<br>
　　P545 ：<br>
　　”对于raw类型套接字，不使用IP协议“，这里明显不对。实际上是由于raw套接字，用户会提供IP header，所以不需要创建IP header。 <br>
　　P705: <br>
　　&#8221;如果上次使用时间在10min之内，则清除该表项&#8221;，应该是“如果上次使用时间在10min之外”。 PS：不清楚这是否是粗心或者印刷问题导致。
　　<br>
　　<p>这本书用的内核版本有很多很明显的bug，比如ip.c的ip_rcv这个函数里面竟然是以报文的frag_off是否为零来判断有无分片，显然把首个分片报文（frag_off为0）给忽略了。</p>
　　
　　<p>总体而言，本书侧重于对源码的解释，对一些基本的网络概念讲解不够好，或者没有讲解。比如对于“面向报文”和“面向流”区别的解释，就有些不知所云。之所以说这本书不需要读第二遍，就是这个原因，作者没有自己的见解在里头，只是给我们提供了一个方便的视角来看源码。</p>
　　
　　<p>对于协议栈初学者而言，在读这本书时，要结合《深入理解linux网络内幕》那本书一起看，那本书对网络的基本概念讲解的特别好，非常清晰明了。 </p>
　　
　　<p>另外，对于所有的网络从业者，甚至说软硬件工程师，《TCP／IP详解卷一》都是必读之书，而且是需要反复去读，读一遍显然是不够的。</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Fight In Rank 4d]]></title>
    <link href="http://laoar.github.io/blog/2015/01/04/the-fight-in-rank-4d/"/>
    <updated>2015-01-04T00:00:00+08:00</updated>
    <id>http://laoar.github.io/blog/2015/01/04/the-fight-in-rank-4d</id>
    <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
	<head>
		<!--mkdir 3rd-party/ under octopress/source/ first, then we put wgo library under the 3rd-party directy, so we can get the file in wgo/ with '/3rd-party/wgo/file', and create our own html files in octopress. -->
    	<script type="text/javascript" src="http://laoar.github.io/3rd-party/wgo/wgo.min.js"></script>
    	<script type="text/javascript" src="http://laoar.github.io/3rd-party/wgo/wgo.player.min.js"></script>
    	<link type="text/css" href="http://laoar.github.io/3rd-party/wgo/wgo.player.css" rel="stylesheet" />
	</head>
	<body>
		<h2><center>四段的对杀</center></h2>
		<h2><center>The Fight in Rank-4D</center></h2>
		<br>
		<h4><center>In memory of the progress with my friend wood.</center></h4>		
        <div data-wgo="/3rd-party/wgo/game.sgf" style="width: 700px"></div>
	</body>
</html>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Reading in 2014]]></title>
    <link href="http://laoar.github.io/blog/2014/12/27/reading-2014/"/>
    <updated>2014-12-27T06:32:01+08:00</updated>
    <id>http://laoar.github.io/blog/2014/12/27/reading-2014</id>
    <content type="html"><![CDATA[<p>This article was automatically generated via <a href="https://github.com/laoar/booklist">Booklist</a>, which is wrote in Ruby by @laoar. It&#8217;s open to everyone. Feel free to use it.</p>


<p>Below are the books @laoar have read in 2014. There&rsquo;re totally 23 books, that&rsquo;s approximately 1.92 books per month, not a bad number. Pls. keep proceeding.<br><br></p>

<h3>1.   Ruby元编程</h3>


<center><img src="http://img5.douban.com/mpic/s7014167.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
读完了ruby的这部分，以后再读rails这部分。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>2.   C程序性能优化</h3>


<center><img src="http://img3.douban.com/mpic/s24611330.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
日本技术人员在一些领域上总是会钻研的很深，他们写的书总有一些参考价值。这本书对我对性能优化的理解很有帮助，虽然大部分内容都无用，然后有那么几句话切实的帮到了我就够了，一本好书！</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>3.   Zero to One</h3>


<center><img src="http://img5.douban.com/mpic/s27463048.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
The author Peter Thiel is  a legendary person. This book descripts his experice on the companies which he has found or invested.</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>4.   图解网络硬件</h3>


<center><img src="http://img3.douban.com/mpic/s27316002.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
讲的很全面，很好的入门读物。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>5.   自由之魂</h3>


<center><img src="http://img5.douban.com/mpic/s27086436.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
可是都去了台湾。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>6.   Of Mice and Men</h3>


<center><img src="http://img3.douban.com/mpic/s4734995.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
Reads like ancient English, i.e. ya, ta, wun&#8217;t. Not sure whether it is because of printing or not, but this is the first kindle book I purchased on amazon.com, which took me around 8$. The two men were both dependent on each other and had a common dream, going through so many difficuties, however the dream was broken at last. Sorrowful ending.</p>


<p>[hmm&#8230;]</p>


<br>




<h3>7.   HTML 5 与 CSS 3 权威指南</h3>


<center><img src="http://img5.douban.com/mpic/s4696737.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
对于不了解html和css的，不适合读这本书。像一本手册，不适合系统学习。作者费这么多心思来搜集网上的资料，大致也能了解html5/css3能够做什么。</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>8.   A Tale of Two Cities</h3>


<center><img src="http://img5.douban.com/mpic/s2789809.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
Charles Dickens&#8217; words are so beautiful.</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>9.   Hard Choices</h3>


<center><img src="http://img5.douban.com/mpic/s27312699.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
Chapters related to China  are as follows, chap. 4, 5 and 25.  Nevertheless, it can broaden our view.</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>10.   图解HTTP</h3>


<center><img src="http://img3.douban.com/mpic/s27283822.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
http快速入门，看完之后能够让你对http了解一个大概，不深入，入门。对于没有网络基础的人而言很适用。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>11.   松本行弘的程序世界</h3>


<center><img src="http://img5.douban.com/mpic/s11290956.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
ruby版《深入理解计算机系统》。侧重理论讲解，离实际应用还很远。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>12.   The Old Man and the Sea</h3>


<center><img src="http://img3.douban.com/mpic/s9068443.jpg"></center>


<p><strong>rating: </strong>★☆☆☆☆</p>


<p><strong>comment:</strong><br>
Looks wierd that it won for Hemingway both Pulitzer and Nobel Prize. It descibes a old fisherman&#8217;s three days&#8217; struggling on the sea just because of a big fish which in his mind represents pride, hornor, faith, goal or something.   This kind of book, per my understanding, only deserves one star. That&#8217;s all.</p>


<p>[hmm&#8230;]</p>


<br>




<h3>13.   The Shortest History of Europe</h3>


<center><img src="http://img3.douban.com/mpic/s4489600.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
It&#8217;s a special perspective that interpreting the history not by timeline, but by the religion, goverment and language.  It mentioned China as well, with the purpose to explain why Europe was the first to industrialise.</p>


<p>[hmm&#8230;]</p>


<br>




<h3>14.   The Fault in Our Stars</h3>


<center><img src="http://img3.douban.com/mpic/s10394551.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
Very sad love story of young adult. It&#8217;s NOTHING but a commercial book, which only aims to sell more copies.  I would recommend it for none.</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>15.   Programming Ruby</h3>


<center><img src="http://img3.douban.com/mpic/s4244255.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
The introduction to Ruby. NO rails, and metaprogramming.</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>16.   The Crowd</h3>


<center><img src="http://img3.douban.com/mpic/s3363313.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
Full of rumor stories, lack of agumentation. It can&#8217;t convinced me withouth enough evidence, but inerest me beause of his point of view. Compared to novel, this kind of book is very hard to read in English.</p>


<p>[hmm&#8230;]</p>


<br>




<h3>17.   Animal Farm</h3>


<center><img src="http://img5.douban.com/mpic/s11909707.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
Orwell is good at using very simple story to explain the truth.Took me few days finish it.Pretty easy reading.It&#8217;s an allegory of the Russian Revolution.The farmer(Nicholas II),Major(Lenin/Marx),Snowball(Leon Trosky)，Napoleon(Stalin),Boxer(the peasants),dogs(The Party).Regarding China, it&#8217;s same.Framer(蒋？)，Major(李大钊/陈独秀),Snowball(刘)，Naploeon(哼～).</p>


<p>[hmm&#8230;]</p>


<br>




<h3>18.   Atlas Shrugged</h3>


<center><img src="http://img5.douban.com/mpic/s1448069.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
花了差不多三个月读完了这本英文皇皇巨著。 I will never live for the sake of another man, nor ask another man to live for min. 安兰德在这本书里宣扬的是自私经济学，反对所谓共产主义。书名来自于Fransisco和Realdan的对话，Atalas holds the world on his shoulders, with his blood running, yet still making greate effort to hold the world aloft.  He need a shrug to relex himself.    很好奇Golt的理想国最后会是什么结局？可惜安兰德没有写。</p>


<p>[hmm&#8230;]</p>


<br>




<h3>19.   代码的未来</h3>


<center><img src="http://img5.douban.com/mpic/s26393136.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
不愧为大师，能够用很通俗的语言把很高深的技术描述的很清楚。 而且把各种技术关联在一起，正应了那句话，技术总是相同的，牛人的牛逼之处就在于能够触类旁通。总之，这本书给我的帮助很大。</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>20.   黑客与画家</h3>


<center><img src="http://img3.douban.com/mpic/s4669554.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
如果不是那几篇谈论编程语言的文章，我真想给它2星。许多文章是又丑又长，一个观点反反复复变换着各个法儿的说，味同嚼蜡。另外，关于未来的编程语言，我还是觉得松本行弘在《代码的未来》里说的更好。</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>21.   台湾念真情</h3>


<center><img src="http://img5.douban.com/mpic/s11150599.jpg"></center>


<p><strong>rating: </strong>★★★★☆</p>


<p><strong>comment:</strong><br>
乡土民情。台湾人的文字很优雅。</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h3>22.   图解TCP/IP : 第5版</h3>


<center><img src="http://img5.douban.com/mpic/s26676928.jpg"></center>


<p><strong>rating: </strong>★★★☆☆</p>


<p><strong>comment:</strong><br>
TCP/IP快速入门，以及索引。 译者的计算机背景似乎不是很强，比如第24页，“最典型的时大实体和小实体”，有点莫名其妙，实则应该是“大端和小端”。</p>


<p><font color=green>[Good job!]</font></p>


<br>




<h3>23.   父与子全集</h3>


<center><img src="http://img5.douban.com/mpic/s1094608.jpg"></center>


<p><strong>rating: </strong>★★★★★</p>


<p><strong>comment:</strong><br>
温馨</p>


<p><font color=red>[Hey slacker, can&#8217;t U read it seriously and give more comment?]</font></p>


<br>




<h2>Statistics</h2>


<br><img src="http://laoar.github.io/images/human_lang.png"><img src="http://laoar.github.io/images/details_month.png">

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[loop unrolling : may or may not make the program run faster]]></title>
    <link href="http://laoar.github.io/blog/2014/11/26/loop-unrolling/"/>
    <updated>2014-11-26T21:58:59+08:00</updated>
    <id>http://laoar.github.io/blog/2014/11/26/loop-unrolling</id>
    <content type="html"><![CDATA[<p>loop unrolling 是将while/for循环的循环主体多排列几次展开以减少循环次数，从而减少分支指令开销来达到优化性能的目的。我们可以手动的修改while/for循环来展开循环体，也可以使用编译器的自动循环展开功能。gcc的-funroll-loops就是用来自动将循环给展开用的。在gcc的手册里，对于-funroll-loops有一句说明，“This option makes code larger, and may or may not make it run faster.”，其实这句话并不是很准确，确切的说法是，“This option may improves or reduces the performance.”。</p>


<p>在最近我的做的一个项目中，版本做出大幅度升级后，性能下降了30%多，经过各种排查后发现原来是编译器从Gcc-4.1.1升级为Gcc-4.2.1后-funroll-loops的行为发生了变化，使得在循环展开的过程中产生了大量的temp variables，这些temp variables入栈和出栈占用了大量的cpu cycles，从而使得其中一个线程成为bottleneck，性能因此下降了30%多.</p>


<p>在这篇博客里，来分析下loop unrolling为什么会导致性能下降</p>


<p>如下是我写的一个测试程序用来描述该问题。</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define TIMES 2</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">atomic_write64</span> <span class="p">(</span><span class="n">u_int64_t</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">u_int64_t</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="n">u_int32_t</span> <span class="n">val_hi</span> <span class="o">=</span> <span class="n">val</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>    <span class="k">volatile</span> <span class="n">u_int32_t</span> <span class="n">val_lo</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">asm</span>  <span class="k">volatile</span><span class="p">(</span><span class="s">&quot;    .set push           </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    .set mips64         </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    dsll   %1, %1, 32   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    dsll   %2, %2, 32   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    dsrl   %2, %2, 32   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    or     %1, %1, %2   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    dsll   %0, %0, 32   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    dsrl   %0, %0, 32   </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    sd     %1, 0(%0)    </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="s">&quot;    .set pop            </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>                <span class="o">:</span>
</span><span class='line'>                <span class="o">:</span><span class="s">&quot;r&quot;</span><span class="p">(</span><span class="n">addr</span><span class="p">),</span> <span class="s">&quot;r&quot;</span> <span class="p">(</span><span class="n">val_hi</span><span class="p">),</span> <span class="s">&quot;r&quot;</span> <span class="p">(</span><span class="n">val_lo</span><span class="p">)</span>
</span><span class='line'>               <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_int64_t</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_int64_t</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u_int64_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">u_int64_t</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">u_int64_t</span> <span class="o">*</span><span class="n">new_addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u_int64_t</span> <span class="o">*</span><span class="p">)((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">addr</span> <span class="o">&amp;</span> <span class="mh">0xfffffff8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TIMES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// The value of random() is 32bits.</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">u_int64_t</span><span class="p">)</span><span class="n">random</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span> <span class="o">+</span> <span class="n">random</span><span class="p">();</span>
</span><span class='line'>        <span class="n">atomic_write64</span><span class="p">(</span><span class="n">new_addr</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对该测试程序的一些注释：<br/>
<1> 该atomic function摘自freebsd source code。<br/>
<2> 使用的编译器是Gcc-4.2.1，平台是MIPS（该CPU是64bit的CPU），ABI是O32.[1]<br>
<3> 之所以要new_addr的低3bits要为0，是由于sd指令要求地址必须是8字节对齐。  这里就是O32和N32区别的一个体现，O32的寄存器是32bits，所以它的栈空间是4字节对齐，即指针是4字节对齐的；N32的寄存器是64bits，所以它的栈空间是64bits，即指针是8字节对齐。在N32上就不需要做这种处理。<br/>
<4> 由于CPU的寄存器是64bits，所以dsll将寄存器左移32bits后会将寄存器内容移到高32bits，实际上这里是变相在使用N32的特性，即64bit寄存器.<br/>
<5> 为了便于理解反汇编，gcc的优化option使用-O.<br/>
<6> 之所以初始测试条件是TIMES为2，而不是1，是为了防止for循环被编译器给优化掉。</p>




<p>我们编译该程序，然后看反汇编结果：</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mo">00000000</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;:</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">:</span>   <span class="mi">3</span><span class="n">c1c0000</span>    <span class="n">lui</span> <span class="n">gp</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mi">4</span><span class="o">:</span>   <span class="mi">279</span><span class="n">c0000</span>    <span class="n">addiu</span>   <span class="n">gp</span><span class="p">,</span><span class="n">gp</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>   <span class="mi">8</span><span class="o">:</span>   <span class="mf">0399e021</span>    <span class="n">addu</span>    <span class="n">gp</span><span class="p">,</span><span class="n">gp</span><span class="p">,</span><span class="n">t9</span>
</span><span class='line'>   <span class="nl">c:</span>   <span class="mi">27</span><span class="n">bdffc8</span>    <span class="n">addiu</span>   <span class="n">sp</span><span class="p">,</span><span class="n">sp</span><span class="p">,</span><span class="o">-</span><span class="mi">56</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">:</span>   <span class="n">afbf0034</span>    <span class="n">sw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">52</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">14</span><span class="o">:</span>   <span class="n">afb40030</span>    <span class="n">sw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">18</span><span class="o">:</span>   <span class="n">afb3002c</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb20028</span>    <span class="n">sw</span>  <span class="n">s2</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">:</span>   <span class="n">afb10024</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">24</span><span class="o">:</span>   <span class="n">afb00020</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">32</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">28</span><span class="o">:</span>   <span class="n">afbc0010</span>    <span class="n">sw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">30</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="mi">34</span><span class="o">:</span>   <span class="mi">24040010</span>    <span class="n">li</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">16</span>
</span><span class='line'>  <span class="mi">38</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">3</span><span class="n">c</span><span class="o">:</span>   <span class="mf">2403ff</span><span class="n">f8</span>    <span class="n">li</span>  <span class="n">v1</span><span class="p">,</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'>  <span class="mi">40</span><span class="o">:</span>   <span class="mo">0043</span><span class="n">a024</span>    <span class="n">and</span> <span class="n">s4</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'>  <span class="mi">44</span><span class="o">:</span>   <span class="mo">0000</span><span class="mi">9021</span>    <span class="n">move</span>    <span class="n">s2</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">4</span><span class="n">c</span><span class="o">:</span>   <span class="mo">0320</span><span class="mi">9821</span>    <span class="n">move</span>    <span class="n">s3</span><span class="p">,</span><span class="n">t9</span>
</span><span class='line'>  <span class="mi">50</span><span class="o">:</span>   <span class="mo">0260</span><span class="n">c821</span>    <span class="n">move</span>    <span class="n">t9</span><span class="p">,</span><span class="n">s3</span>
</span><span class='line'>  <span class="mi">54</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="mi">58</span><span class="o">:</span>   <span class="mo">0000</span><span class="mi">8821</span>    <span class="n">move</span>    <span class="n">s1</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">5</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">60</span><span class="o">:</span>   <span class="mo">0260</span><span class="n">c821</span>    <span class="n">move</span>    <span class="n">t9</span><span class="p">,</span><span class="n">s3</span>
</span><span class='line'>  <span class="mi">64</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="mi">68</span><span class="o">:</span>   <span class="mo">0040</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="mi">6</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">70</span><span class="o">:</span>   <span class="mo">00401</span><span class="mi">821</span>    <span class="n">move</span>    <span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="mi">74</span><span class="o">:</span>   <span class="mo">000217</span><span class="n">c3</span>    <span class="n">sra</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'>  <span class="mi">78</span><span class="o">:</span>   <span class="mo">0202</span><span class="mi">8025</span>    <span class="n">or</span>  <span class="n">s0</span><span class="p">,</span><span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="mi">7</span><span class="n">c</span><span class="o">:</span>   <span class="mo">0223</span><span class="mi">8825</span>    <span class="n">or</span>  <span class="n">s1</span><span class="p">,</span><span class="n">s1</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'>  <span class="mi">80</span><span class="o">:</span>   <span class="n">afb00018</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">84</span><span class="o">:</span>   <span class="n">afb1001c</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">88</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a30018</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">8</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a2001c</span>    <span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">90</span><span class="o">:</span>   <span class="mo">00031</span><span class="mi">83</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">v1</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="mi">94</span><span class="o">:</span>   <span class="mo">0002103</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="mi">98</span><span class="o">:</span>   <span class="mo">0002103</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="mi">9</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00621</span><span class="mi">825</span>    <span class="n">or</span>  <span class="n">v1</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="nl">a0:</span>   <span class="mo">0014</span><span class="n">a03c</span>    <span class="n">dsll32</span>  <span class="n">s4</span><span class="p">,</span><span class="n">s4</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="nl">a4:</span>   <span class="mo">0014</span><span class="n">a03e</span>    <span class="n">dsrl32</span>  <span class="n">s4</span><span class="p">,</span><span class="n">s4</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="nl">a8:</span>   <span class="n">fe830000</span>    <span class="n">sd</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">s4</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">ac:</span>   <span class="mi">26520001</span>    <span class="n">addiu</span>   <span class="n">s2</span><span class="p">,</span><span class="n">s2</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'>  <span class="nl">b0:</span>   <span class="mi">24020002</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">2</span>
</span><span class='line'>  <span class="nl">b4:</span>   <span class="mf">1642ff</span><span class="n">e7</span>    <span class="n">bne</span> <span class="n">s2</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mi">54</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mh">0x54</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nl">b8:</span>   <span class="mo">0260</span><span class="n">c821</span>    <span class="n">move</span>    <span class="n">t9</span><span class="p">,</span><span class="n">s3</span>
</span><span class='line'>  <span class="nl">bc:</span>   <span class="mo">00001021</span>    <span class="n">move</span>    <span class="n">v0</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="nl">c0:</span>   <span class="mf">8f</span><span class="n">bf0034</span>    <span class="n">lw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">52</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">c4:</span>   <span class="mf">8f</span><span class="n">b40030</span>    <span class="n">lw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">c8:</span>   <span class="mf">8f</span><span class="n">b3002c</span>    <span class="n">lw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">cc:</span>   <span class="mf">8f</span><span class="n">b20028</span>    <span class="n">lw</span>  <span class="n">s2</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">d0:</span>   <span class="mf">8f</span><span class="n">b10024</span>    <span class="n">lw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">d4:</span>   <span class="mf">8f</span><span class="n">b00020</span>    <span class="n">lw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">32</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">d8:</span>   <span class="mf">03e00008</span>    <span class="n">jr</span>  <span class="n">ra</span>
</span><span class='line'>  <span class="nl">dc:</span>   <span class="mi">27</span><span class="n">bd0038</span>    <span class="n">addiu</span>   <span class="n">sp</span><span class="p">,</span><span class="n">sp</span><span class="p">,</span><span class="mi">56</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，变量val_hi和val_lo分别存储在24(sp)和28(sp)这部分内存空间.</p>


<p>另外还需要注意的变量x。<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mi">64</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="mi">68</span><span class="o">:</span>   <span class="mo">0040</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="mi">6</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">70</span><span class="o">:</span>   <span class="mo">00401</span><span class="mi">821</span>    <span class="n">move</span>    <span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span></code></pre></td></tr></table></div></figure>
由于我只是-C来编译，并没有做链接，所以在这里调用random()这个函数是被编译为了”jalr t9”，在MIPS上，函数调用的返回值会放在$v0这个寄存器里面。[2]在这里函数调用的返回值$v0 是直接赋值给了$s0和$v1，而不是放入栈空间，这说明编译器将变量x存储在了寄存器里面而不是内存里面。编译器之所以会这么做，是为了提高性能。变量尽可能的存储在寄存器上，从而减少访问内存所需要消耗的时间。另外再说一句，寄存器数量是有限的，当寄存器无法再存储变量时，就会将临时变量存储到内存上。</p>


<p></p>然后我们将TIME 变为3，对比看下有无funroll-loops下的差异。</p>
1) 无funroll-loops.</p>

<p>结果证明，跟TIMES为2的情况下相比，反汇编结果一样。此处不再拷贝代码</p>


<p>2） 使用funroll-loops</p>

<p> 汇编代码较长，闪花了眼，我在后面只解释重点。</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mo">00000000</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;:</span>
</span><span class='line'>   <span class="mi">0</span><span class="o">:</span>   <span class="mi">3</span><span class="n">c1c0000</span>    <span class="n">lui</span> <span class="n">gp</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'>   <span class="mi">4</span><span class="o">:</span>   <span class="mi">279</span><span class="n">c0000</span>    <span class="n">addiu</span>   <span class="n">gp</span><span class="p">,</span><span class="n">gp</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>   <span class="mi">8</span><span class="o">:</span>   <span class="mf">0399e021</span>    <span class="n">addu</span>    <span class="n">gp</span><span class="p">,</span><span class="n">gp</span><span class="p">,</span><span class="n">t9</span>
</span><span class='line'>   <span class="nl">c:</span>   <span class="mi">27</span><span class="n">bdff58</span>    <span class="n">addiu</span>   <span class="n">sp</span><span class="p">,</span><span class="n">sp</span><span class="p">,</span><span class="o">-</span><span class="mi">168</span>
</span><span class='line'>  <span class="mi">10</span><span class="o">:</span>   <span class="n">afbf00a4</span>    <span class="n">sw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">164</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">14</span><span class="o">:</span>   <span class="n">afbe00a0</span>    <span class="n">sw</span>  <span class="n">s8</span><span class="p">,</span><span class="mi">160</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">18</span><span class="o">:</span>   <span class="n">afb7009c</span>    <span class="n">sw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">156</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb60098</span>    <span class="n">sw</span>  <span class="n">s6</span><span class="p">,</span><span class="mi">152</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">:</span>   <span class="n">afb50094</span>    <span class="n">sw</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">148</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">24</span><span class="o">:</span>   <span class="n">afb40090</span>    <span class="n">sw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">144</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">28</span><span class="o">:</span>   <span class="n">afb3008c</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">140</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">2</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb20088</span>    <span class="n">sw</span>  <span class="n">s2</span><span class="p">,</span><span class="mi">136</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">30</span><span class="o">:</span>   <span class="n">afb10084</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">132</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">34</span><span class="o">:</span>   <span class="n">afb00080</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">128</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">38</span><span class="o">:</span>   <span class="n">afbc0010</span>    <span class="n">sw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">3</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00003</span><span class="mi">821</span>    <span class="n">move</span>    <span class="n">a3</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">40</span><span class="o">:</span>   <span class="mo">00003021</span>    <span class="n">move</span>    <span class="n">a2</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">44</span><span class="o">:</span>   <span class="n">afa70024</span>    <span class="n">sw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">:</span>   <span class="n">afa60020</span>    <span class="n">sw</span>  <span class="n">a2</span><span class="p">,</span><span class="mi">32</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">4</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa7002c</span>    <span class="n">sw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">50</span><span class="o">:</span>   <span class="n">afa60028</span>    <span class="n">sw</span>  <span class="n">a2</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">54</span><span class="o">:</span>   <span class="n">afa7003c</span>    <span class="n">sw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">60</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">58</span><span class="o">:</span>   <span class="n">afa60038</span>    <span class="n">sw</span>  <span class="n">a2</span><span class="p">,</span><span class="mi">56</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">5</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00002021</span>    <span class="n">move</span>    <span class="n">a0</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">60</span><span class="o">:</span>   <span class="mo">00001</span><span class="mi">821</span>    <span class="n">move</span>    <span class="n">v1</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="mi">64</span><span class="o">:</span>   <span class="n">afa40044</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">68</span><span class="o">:</span>   <span class="n">afa30040</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">64</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">6</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa4004c</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">76</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">70</span><span class="o">:</span>   <span class="n">afa30048</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">72</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">74</span><span class="o">:</span>   <span class="n">afa40054</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">84</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">78</span><span class="o">:</span>   <span class="n">afa30050</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">80</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">7</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa4005c</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">92</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">80</span><span class="o">:</span>   <span class="n">afa30058</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">88</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">84</span><span class="o">:</span>   <span class="n">afa40064</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">100</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">88</span><span class="o">:</span>   <span class="n">afa30060</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">96</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'> <span class="mi">8</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa4006c</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">108</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">90</span><span class="o">:</span>   <span class="n">afa30068</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">104</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">94</span><span class="o">:</span>   <span class="n">afa40074</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">116</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">98</span><span class="o">:</span>   <span class="n">afa30070</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">112</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">9</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa4007c</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">124</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">a0:</span>   <span class="n">afa30078</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">120</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">a4:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">a8:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="nl">ac:</span>   <span class="mi">24040010</span>    <span class="n">li</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">16</span>
</span><span class='line'>  <span class="nl">b0:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">b4:</span>   <span class="mf">2405ff</span><span class="n">f8</span>    <span class="n">li</span>  <span class="n">a1</span><span class="p">,</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'>  <span class="nl">b8:</span>   <span class="mo">00451024</span>    <span class="n">and</span> <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">a1</span>
</span><span class='line'>  <span class="nl">bc:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">c0:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="nl">c4:</span>   <span class="n">afa20030</span>    <span class="n">sw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">c8:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">cc:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">d0:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'>  <span class="nl">d4:</span>   <span class="mo">0040</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="nl">d8:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">dc:</span>   <span class="mo">0000</span><span class="n">a821</span>    <span class="n">move</span>    <span class="n">s5</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'>  <span class="nl">e0:</span>   <span class="mo">0002</span><span class="n">c7c3</span>    <span class="n">sra</span> <span class="n">t8</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'>  <span class="nl">e4:</span>   <span class="mo">021</span><span class="mi">8</span><span class="n">b825</span>    <span class="n">or</span>  <span class="n">s7</span><span class="p">,</span><span class="n">s0</span><span class="p">,</span><span class="n">t8</span>
</span><span class='line'>  <span class="nl">e8:</span>   <span class="n">afb70028</span>    <span class="n">sw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">ec:</span>   <span class="mo">02</span><span class="n">a2a025</span>    <span class="n">or</span>  <span class="n">s4</span><span class="p">,</span><span class="n">s5</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'>  <span class="nl">f0:</span>   <span class="n">afb4002c</span>    <span class="n">sw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">f4:</span>   <span class="mf">8f</span><span class="n">b1002c</span>    <span class="n">lw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">f8:</span>   <span class="mf">8f</span><span class="n">b30028</span>    <span class="n">lw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">fc:</span>   <span class="n">afb30018</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">100</span><span class="o">:</span>   <span class="n">afb1001c</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">104</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">ae0018</span>    <span class="n">lw</span>  <span class="n">t6</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">108</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">af001c</span>    <span class="n">lw</span>  <span class="n">t7</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a50030</span>    <span class="n">lw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">110</span><span class="o">:</span>   <span class="mf">000e703</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">t6</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">114</span><span class="o">:</span>   <span class="mf">000f</span><span class="mi">783</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">t7</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">118</span><span class="o">:</span>   <span class="mf">000f</span><span class="mi">783</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">t7</span><span class="p">,</span><span class="n">t7</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">11</span><span class="n">c</span><span class="o">:</span>   <span class="mo">01</span><span class="n">cf7025</span>    <span class="n">or</span>  <span class="n">t6</span><span class="p">,</span><span class="n">t6</span><span class="p">,</span><span class="n">t7</span>
</span><span class='line'><span class="mi">120</span><span class="o">:</span>   <span class="mo">00052</span><span class="mi">83</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">a1</span><span class="p">,</span><span class="n">a1</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">124</span><span class="o">:</span>   <span class="mo">00052</span><span class="mi">83</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">a1</span><span class="p">,</span><span class="n">a1</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">128</span><span class="o">:</span>   <span class="n">fcae0000</span>    <span class="n">sd</span>  <span class="n">t6</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="mi">12</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'><span class="mi">130</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'><span class="mi">134</span><span class="o">:</span>   <span class="mf">0000f</span><span class="mo">021</span>    <span class="n">move</span>    <span class="n">s8</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'><span class="mi">138</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">13</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'><span class="mi">140</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'><span class="mi">144</span><span class="o">:</span>   <span class="mo">0040</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mi">148</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">14</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb00044</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">150</span><span class="o">:</span>   <span class="mo">001067</span><span class="n">c3</span>    <span class="n">sra</span> <span class="n">t4</span><span class="p">,</span><span class="n">s0</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'><span class="mi">154</span><span class="o">:</span>   <span class="n">afac0040</span>    <span class="n">sw</span>  <span class="n">t4</span><span class="p">,</span><span class="mi">64</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">158</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">ab0044</span>    <span class="n">lw</span>  <span class="n">t3</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">15</span><span class="n">c</span><span class="o">:</span>   <span class="n">afab0048</span>    <span class="n">sw</span>  <span class="n">t3</span><span class="p">,</span><span class="mi">72</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">160</span><span class="o">:</span>   <span class="mo">00005021</span>    <span class="n">move</span>    <span class="n">t2</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'><span class="mi">164</span><span class="o">:</span>   <span class="n">afaa004c</span>    <span class="n">sw</span>  <span class="n">t2</span><span class="p">,</span><span class="mi">76</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">168</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a60048</span>    <span class="n">lw</span>  <span class="n">a2</span><span class="p">,</span><span class="mi">72</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">16</span><span class="n">c</span><span class="o">:</span>   <span class="n">afa20054</span>    <span class="n">sw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">84</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">170</span><span class="o">:</span>   <span class="mo">000247</span><span class="n">c3</span>    <span class="n">sra</span> <span class="n">t0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'><span class="mi">174</span><span class="o">:</span>   <span class="n">afa80050</span>    <span class="n">sw</span>  <span class="n">t0</span><span class="p">,</span><span class="mi">80</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">178</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a30054</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">84</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">17</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a70050</span>    <span class="n">lw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">80</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">180</span><span class="o">:</span>   <span class="mo">00</span><span class="n">c72025</span>    <span class="n">or</span>  <span class="n">a0</span><span class="p">,</span><span class="n">a2</span><span class="p">,</span><span class="n">a3</span>
</span><span class='line'><span class="mi">184</span><span class="o">:</span>   <span class="n">afa40020</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">32</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">188</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a5004c</span>    <span class="n">lw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">76</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">18</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00</span><span class="n">a31025</span>    <span class="n">or</span>  <span class="n">v0</span><span class="p">,</span><span class="n">a1</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'><span class="mi">190</span><span class="o">:</span>   <span class="n">afa20024</span>    <span class="n">sw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">194</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bf0020</span>    <span class="n">lw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">32</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">198</span><span class="o">:</span>   <span class="n">afbf005c</span>    <span class="n">sw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">92</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">19</span><span class="n">c</span><span class="o">:</span>   <span class="n">afbe0058</span>    <span class="n">sw</span>  <span class="n">s8</span><span class="p">,</span><span class="mi">88</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">a0</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b8005c</span>    <span class="n">lw</span>  <span class="n">t8</span><span class="p">,</span><span class="mi">92</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">a4</span><span class="o">:</span>   <span class="n">afb80018</span>    <span class="n">sw</span>  <span class="n">t8</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">a8</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b70024</span>    <span class="n">lw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'> <span class="mi">1</span><span class="n">ac</span><span class="o">:</span>   <span class="n">afb7001c</span>    <span class="n">sw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">b0</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b50018</span>    <span class="n">lw</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">b4</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b6001c</span>    <span class="n">lw</span>  <span class="n">s6</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">b8</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a40030</span>    <span class="n">lw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">bc</span><span class="o">:</span>   <span class="mo">0015</span><span class="n">a83c</span>    <span class="n">dsll32</span>  <span class="n">s5</span><span class="p">,</span><span class="n">s5</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">1</span><span class="n">c0</span><span class="o">:</span>   <span class="mo">0016</span><span class="n">b03c</span>    <span class="n">dsll32</span>  <span class="n">s6</span><span class="p">,</span><span class="n">s6</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">1</span><span class="n">c4</span><span class="o">:</span>   <span class="mo">0016</span><span class="n">b03e</span>    <span class="n">dsrl32</span>  <span class="n">s6</span><span class="p">,</span><span class="n">s6</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">1</span><span class="n">c8</span><span class="o">:</span>   <span class="mo">02</span><span class="n">b6a825</span>    <span class="n">or</span>  <span class="n">s5</span><span class="p">,</span><span class="n">s5</span><span class="p">,</span><span class="n">s6</span>
</span><span class='line'><span class="mi">1</span><span class="n">cc</span><span class="o">:</span>   <span class="mo">0004203</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">a0</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">1</span><span class="n">d0</span><span class="o">:</span>   <span class="mo">0004203</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">a0</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">1</span><span class="n">d4</span><span class="o">:</span>   <span class="n">fc950000</span>    <span class="n">sd</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">d8</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">dc</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'><span class="mf">1e0</span><span class="o">:</span>   <span class="mo">0000</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'><span class="mf">1e4</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mf">1e8</span><span class="o">:</span>   <span class="mf">8f</span><span class="mi">990000</span>    <span class="n">lw</span>  <span class="n">t9</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">gp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">ec</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'><span class="mf">1f</span><span class="mi">0</span><span class="o">:</span>   <span class="mo">0040</span><span class="mi">9821</span>    <span class="n">move</span>    <span class="n">s3</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mf">1f</span><span class="mi">4</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mf">1f</span><span class="mi">8</span><span class="o">:</span>   <span class="n">afb30064</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">100</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mf">1f</span><span class="n">c</span><span class="o">:</span>   <span class="mo">0013</span><span class="mi">97</span><span class="n">c3</span>    <span class="n">sra</span> <span class="n">s2</span><span class="p">,</span><span class="n">s3</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'><span class="mi">200</span><span class="o">:</span>   <span class="n">afb20060</span>    <span class="n">sw</span>  <span class="n">s2</span><span class="p">,</span><span class="mi">96</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">204</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b10064</span>    <span class="n">lw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">100</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">208</span><span class="o">:</span>   <span class="n">afb10068</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">104</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">20</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb0006c</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">108</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">210</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">ac0068</span>    <span class="n">lw</span>  <span class="n">t4</span><span class="p">,</span><span class="mi">104</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">214</span><span class="o">:</span>   <span class="n">afa20074</span>    <span class="n">sw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">116</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">218</span><span class="o">:</span>   <span class="mo">000277</span><span class="n">c3</span>    <span class="n">sra</span> <span class="n">t6</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x1f</span>
</span><span class='line'><span class="mi">21</span><span class="n">c</span><span class="o">:</span>   <span class="n">afae0070</span>    <span class="n">sw</span>  <span class="n">t6</span><span class="p">,</span><span class="mi">112</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">220</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">aa0074</span>    <span class="n">lw</span>  <span class="n">t2</span><span class="p">,</span><span class="mi">116</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">224</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">ad0070</span>    <span class="n">lw</span>  <span class="n">t5</span><span class="p">,</span><span class="mi">112</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">228</span><span class="o">:</span>   <span class="mo">01</span><span class="mi">8</span><span class="n">d5825</span>    <span class="n">or</span>  <span class="n">t3</span><span class="p">,</span><span class="n">t4</span><span class="p">,</span><span class="n">t5</span>
</span><span class='line'> <span class="mi">22</span><span class="n">c</span><span class="o">:</span>   <span class="n">afab0038</span>    <span class="n">sw</span>  <span class="n">t3</span><span class="p">,</span><span class="mi">56</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">230</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a9006c</span>    <span class="n">lw</span>  <span class="n">t1</span><span class="p">,</span><span class="mi">108</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">234</span><span class="o">:</span>   <span class="mo">012</span><span class="n">a4025</span>    <span class="n">or</span>  <span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span>
</span><span class='line'><span class="mi">238</span><span class="o">:</span>   <span class="n">afa8003c</span>    <span class="n">sw</span>  <span class="n">t0</span><span class="p">,</span><span class="mi">60</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">23</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a70038</span>    <span class="n">lw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">56</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">240</span><span class="o">:</span>   <span class="n">afa7007c</span>    <span class="n">sw</span>  <span class="n">a3</span><span class="p">,</span><span class="mi">124</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">244</span><span class="o">:</span>   <span class="mo">00003021</span>    <span class="n">move</span>    <span class="n">a2</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'><span class="mi">248</span><span class="o">:</span>   <span class="n">afa60078</span>    <span class="n">sw</span>  <span class="n">a2</span><span class="p">,</span><span class="mi">120</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">24</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a4007c</span>    <span class="n">lw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">124</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">250</span><span class="o">:</span>   <span class="n">afa40018</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">254</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a5003c</span>    <span class="n">lw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">60</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">258</span><span class="o">:</span>   <span class="n">afa5001c</span>    <span class="n">sw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">25</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a30018</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">260</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a2001c</span>    <span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">264</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a40030</span>    <span class="n">lw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">48</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">268</span><span class="o">:</span>   <span class="mo">00031</span><span class="mi">83</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">v1</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">26</span><span class="n">c</span><span class="o">:</span>   <span class="mo">0002103</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">270</span><span class="o">:</span>   <span class="mo">0002103</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">274</span><span class="o">:</span>   <span class="mo">00621</span><span class="mi">825</span>    <span class="n">or</span>  <span class="n">v1</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mi">278</span><span class="o">:</span>   <span class="mo">0004203</span><span class="n">c</span>    <span class="n">dsll32</span>  <span class="n">a0</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">27</span><span class="n">c</span><span class="o">:</span>   <span class="mo">0004203</span><span class="n">e</span>    <span class="n">dsrl32</span>  <span class="n">a0</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mh">0x0</span>
</span><span class='line'><span class="mi">280</span><span class="o">:</span>   <span class="n">fc830000</span>    <span class="n">sd</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">284</span><span class="o">:</span>   <span class="mo">00001021</span>    <span class="n">move</span>    <span class="n">v0</span><span class="p">,</span><span class="n">zero</span>
</span><span class='line'><span class="mi">288</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bf00a4</span>    <span class="n">lw</span>  <span class="n">ra</span><span class="p">,</span><span class="mi">164</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">28</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">be00a0</span>    <span class="n">lw</span>  <span class="n">s8</span><span class="p">,</span><span class="mi">160</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">290</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b7009c</span>    <span class="n">lw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">156</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">294</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b60098</span>    <span class="n">lw</span>  <span class="n">s6</span><span class="p">,</span><span class="mi">152</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">298</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b50094</span>    <span class="n">lw</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">148</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">29</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b40090</span>    <span class="n">lw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">144</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="n">a0</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b3008c</span>    <span class="n">lw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">140</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="n">a4</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b20088</span>    <span class="n">lw</span>  <span class="n">s2</span><span class="p">,</span><span class="mi">136</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="n">a8</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b10084</span>    <span class="n">lw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">132</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="n">ac</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b00080</span>    <span class="n">lw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">128</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="n">b0</span><span class="o">:</span>   <span class="mf">03e00008</span>    <span class="n">jr</span>  <span class="n">ra</span>
</span><span class='line'><span class="mi">2</span><span class="n">b4</span><span class="o">:</span>   <span class="mi">27</span><span class="n">bd00a8</span>    <span class="n">addiu</span>   <span class="n">sp</span><span class="p">,</span><span class="n">sp</span><span class="p">,</span><span class="mi">168</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，栈空间一下子由56增加到了168，即增加了112字节这么大的空间！
我们就来分析下这112字节的空间是怎么产生的。<br/>
<1>从汇编代码来看，变量val_high和val_lo仍然是存储在24(sp)和28(sp)这部分内存空间。但是同时也生成了大量的临时变量。<br/>
比如i为1时被展开的循环体：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">f4:</span>   <span class="mf">8f</span><span class="n">b1002c</span>    <span class="n">lw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">44</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f8</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b30028</span>    <span class="n">lw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">40</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fc</span><span class="o">:</span>   <span class="n">afb30018</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">100</span><span class="o">:</span>   <span class="n">afb1001c</span>    <span class="n">sw</span>  <span class="n">s1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
可以看到至少新增了44(sp)和40(sp)这两个临时变量。<br/>
i为2时被展开的循环体：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">1</span><span class="n">a0</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b8005c</span>    <span class="n">lw</span>  <span class="n">t8</span><span class="p">,</span><span class="mi">92</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">a4</span><span class="o">:</span>   <span class="n">afb80018</span>    <span class="n">sw</span>  <span class="n">t8</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="n">a8</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b70024</span>    <span class="n">lw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">36</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'> <span class="mi">1</span><span class="n">ac</span><span class="o">:</span>   <span class="n">afb7001c</span>    <span class="n">sw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
 至少新增了36(sp)和92(sp)这两个临时变量。 <br/>
i为3时被展开的循环体：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">24</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a4007c</span>    <span class="n">lw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">124</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">250</span><span class="o">:</span>   <span class="n">afa40018</span>    <span class="n">sw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">24</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">254</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">a5003c</span>    <span class="n">lw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">60</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">258</span><span class="o">:</span>   <span class="n">afa5001c</span>    <span class="n">sw</span>  <span class="n">a1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
至少新增了60(sp)和124(sp)这两个临时变量。 <br/>
注意这里不是参数入栈和出栈，因为这里是inline，不是函数调用。增加的这六个临时变量都是因为atomic_write64这个inline函数里定义了局部变量，他们其实是为了服务于那两个局部变量。<br/>
<2>再来看变量x <br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">140</span><span class="o">:</span>   <span class="mf">0320f</span><span class="mi">809</span>    <span class="n">jalr</span>    <span class="n">t9</span>
</span><span class='line'><span class="mi">144</span><span class="o">:</span>   <span class="mo">0040</span><span class="mi">8021</span>    <span class="n">move</span>    <span class="n">s0</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mi">148</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">bc0010</span>    <span class="n">lw</span>  <span class="n">gp</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">14</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb00044</span>    <span class="n">sw</span>  <span class="n">s0</span><span class="p">,</span><span class="mi">68</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
可以看到这里新增加了一个临时变量68(sp)用来存储random()函数的返回值。<br/>
这也是在前面使用“4:   afa40044    sw  a0,68(sp)”来初始化该临时变量的原因。<br/>
<3>循环展开后i值不同的循环体使用不同的$sn寄存器 <br/>
用到这些寄存器，就需要在函数开始将该寄存器压栈，然后在函数结束时出栈。<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mi">14</span><span class="o">:</span>   <span class="n">afbe00a0</span>    <span class="n">sw</span>  <span class="n">s8</span><span class="p">,</span><span class="mi">160</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">18</span><span class="o">:</span>   <span class="n">afb7009c</span>    <span class="n">sw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">156</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span><span class="n">c</span><span class="o">:</span>   <span class="n">afb60098</span>    <span class="n">sw</span>  <span class="n">s6</span><span class="p">,</span><span class="mi">152</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">:</span>   <span class="n">afb50094</span>    <span class="n">sw</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">148</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">24</span><span class="o">:</span>   <span class="n">afb40090</span>    <span class="n">sw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">144</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">28</span><span class="o">:</span>   <span class="n">afb3008c</span>    <span class="n">sw</span>  <span class="n">s3</span><span class="p">,</span><span class="mi">140</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="mi">28</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">be00a0</span>    <span class="n">lw</span>  <span class="n">s8</span><span class="p">,</span><span class="mi">160</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">290</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b7009c</span>    <span class="n">lw</span>  <span class="n">s7</span><span class="p">,</span><span class="mi">156</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">294</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b60098</span>    <span class="n">lw</span>  <span class="n">s6</span><span class="p">,</span><span class="mi">152</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">298</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b50094</span>    <span class="n">lw</span>  <span class="n">s5</span><span class="p">,</span><span class="mi">148</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span><span class='line'><span class="mi">29</span><span class="n">c</span><span class="o">:</span>   <span class="mf">8f</span><span class="n">b40090</span>    <span class="n">lw</span>  <span class="n">s4</span><span class="p">,</span><span class="mi">144</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
新增的这些临时变量和对过多寄存器的使用增加了栈空间，而且入栈出栈也很消耗CPU cycles，因为这涉及到读写内存。 </p>


<p>由此我们可以得到一个初步结论，在unroll-loops的过程中，如果产生了额外的临时变量，那么unroll loops就极有可能对性能造成伤害。 </p>


<p>继续来分析gcc的unroll loops的特性。以下的分析基于gcc的源码loop-unroll.c 。</p>


<p>由于这时TIMES仅为3，gcc可以将其完全展开，即peel_loop_completely，展开方式如下：</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm">   Peel all iterations of LOOP, remove exit edges and cancel the loop</span>
</span><span class='line'><span class="cm">   completely.  The transformation done:</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>     <span class="n">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 展开为</span>
</span><span class='line'>   <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果将TIMES增大到100，可以发现gcc并不会将循环体展开100次。循环展开多少次最好，在gcc unroll loops的设计者看来也是一个很难的问题，A great problem is that we don&#8217;t have a good way how to determine how many times we should unroll the loop; the experiments I have made showed that this choice may affect performance in order of several %. 因而unroll loops的设计着就定义了一些parameter来由程序员自行定义unroll规则。</p>


<p>这些参数有max-unrolled-insns，max-unroll-times，max-peeled-insns和max-peel-times等。用法大致如&#8211;param max-unroll-times=N，如果在使能funroll-loops或者fpeel-loops（如果使能了funroll-loops会同时使能fpeel-loops）后没有设置这些参数，就会使用gcc的默认值，具体参考params.def这个文件。 这些参数的具体含义可以去查阅gcc manual，不再赘述。只说下peel和unroll的区别，从英语语义上来讲，peel是剥离，unroll是摊开，在这里也是这个含义，peel是指从循环中给剥离出去，unroll则是仍然在循环体内。我们可以通过gcc的source code来看下这两者的区别。</p>


<p>gcc unroll-loops的入口函数是rtl_unroll_and_peel_loops，在这里它会去检查funroll-loops,fpeel-loops,funroll-all-loops这些开关。然后就会调用unroll loops的主要函数体unroll_and_peel_loops。</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">unroll_and_peel_loops</span>
</span><span class='line'>        <span class="cm">/* First perform complete loop peeling (it is almost surely a win,</span>
</span><span class='line'><span class="cm">           and affects parameters for further decision a lot).  */</span>
</span><span class='line'>        <span class="n">peel_loops_completely</span> <span class="p">(</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Now decide rest of unrolling and peeling.  */</span>
</span><span class='line'>        <span class="n">decide_unrolling_and_peeling</span> <span class="p">(</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Scan the loops, inner ones first.  */</span>
</span><span class='line'>        <span class="n">FOR_EACH_LOOP</span> <span class="p">(</span><span class="n">loop</span><span class="p">,</span> <span class="n">LI_FROM_INNERMOST</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>              <span class="p">...</span>
</span><span class='line'>         <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到它首先做的就是尝试peel completely，如果不行，就再去选择unroll/peel策略，最后从最内侧循环开始unroll。 举个简单的例子，<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">102</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>     <span class="n">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//展开为</span>
</span><span class='line'>   <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">102</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
前两个body就是peel，后面while循环体内就是unroll。</p>


<p></p>

<p>总之就是，使用gcc的unroll需谨慎，如果循环次数在编译阶段就确定的，完全可以手动的展开，而不用gcc的unroll，当然展开的次数也是一个经验值，需要根据具体情况来定。对于运行时才能决定循环次数的，gcc也可以将其展开，展开方法大致如下：
<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>     <span class="n">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// 展开为： </span>
</span><span class='line'>   <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="n">mod</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">switch</span> <span class="p">(</span><span class="n">mod</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">3</span>:
</span><span class='line'>         <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>         <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>         <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="k">case</span> <span class="mi">0</span>: <span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="n">body</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
另外再说一句，unroll loops要在critical path才能体现出价值来，对于non-critical path，就不应该做unroll loops了。这也是gcc的funroll-loops的一个不足之处，它不知道哪里是critical哪里non-critical，对它而言代码是平等的（程序员主动告知编译器的例外，比如likely/unlikely），它会一视同仁的把所有该展开的都展开。也许编程语言日后的发展方向会是，根据运行时的情况来自动的调整可执行文件的布局，从而每执行一次就可以优化一次来让程序越来越快[3].</p>


<p></p>

<p>[1] MIPS支持3种ABI：O32/N32/N64,O32/N32的数据模型是ILP32，而N64是LP64，N32和O32的区别是N32的寄存器是64bit而O32的是32bit，N32使用64bits寄存器就要求栈要以8字节对齐。具体见<a href="http://math-atlas.sourceforge.net/devel/assembly/007-2816-005.pdf">http://math-atlas.sourceforge.net/devel/assembly/007-2816-005.pdf</a> <br/>
[2] 如果返回值是64bits,就会用到$v0和$v1这两个寄存器。对于一些高级编程语言比如Ruby，它可以有多个返回值，不过它实际上是返回的一个数组，数组里面有多个值，即本质上还是返回一个值。<br/>
[3] 支持元编程的语言，比如Ruby，可以在运行时来修改代码，但是它不是来调整代码段的布局。<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby, 我的书有点乱]]></title>
    <link href="http://laoar.github.io/blog/2014/08/31/ruby/"/>
    <updated>2014-08-31T00:26:17+08:00</updated>
    <id>http://laoar.github.io/blog/2014/08/31/ruby</id>
    <content type="html"><![CDATA[<p>可能人到了三十而立的时候，就很少纯粹为了学习而学习了，因为已经没有太多的精力来浪费在那些花里胡哨的东西上。这个时候通常都是为了解决实际问题而去学习，这也像是找工作一样，刚毕业的人都是看潜力，工作几年之后就是看能不能尽快干活了。</p>


<p>我现在学习Ruby，也不是为了了解这个纯粹面向对象的东西到底是什么样子的，而是为了解决我面对的一些实际问题。比如说现在遇到的问题，自从买了Kindle后，我就隔三差五的会下载一些kindle电子书，有时候也会买一些，而我呢又是比较懒散的一个人，这样就搞的我的电子书有些乱，就那样胡乱的放着。这个时候你可能会说，花一点点时间整理一下不就好了嘛。嗯，那是因为你不是程序员。对于程序员而言，他们宁愿花很多时间写个程序来搞定。</p>


<p>因为对于程序员而言，手动操作是下三滥的勾当，它就像一个男人向别人承认自己阳痿一样难以接受。</p>


<p>在很多情况下，明明5分钟就能用手来搞定的事情，非得花几个小时写然后再花几天调最终还可能产生意料之外的错误的程序来做。这大致就是程序员碎了一地的节操吧。</p>


<p>我在网上下载以及从Amazon上买的电子书有以下几种情况让我心里有些许的不爽，可能是由于最近是处女座的日子，我也跟着有些强迫症起来。<br>
1. Life of Pi(少年pi的奇幻漂流） - Austin Lee.mobi<br>
我不喜欢名字里面有括号括起来的东西，而且这部分内容完全是重复的，我向纯粹一些，把括号里面的内容给删掉。<br>
2. Of Mice and Men (Penguin Classics)_B00CS74W6Q.azw3<br> 
Amazon上卖的书，书的编号（比如_B00CS74W6Q）是直接放在文件名字里面的，好在我不是处女座，所以对这个东西是可以接受的，而且觉得它挺好，可以用来区分哪些书是下载的哪些书是买的。我正好打算把下载的书和买的书给分开，所以这个东西就派上用场了。<br> 
3. 我下载的东西都是放在默认的Download目录里面，我想把他们都整理到Documents这个目录里面。<br>
所以我就写了个Ruby脚本来做这件事。其实，目前为止仍然困惑我的一件事情是，Ruby除了做脚本还能做什么呢？</p>


<p></p>

<p>这个<a href="https://github.com/laoar/bcleaner">Ruby脚本</a>很短小，所以就直接贴在这里了。</p>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span>  <span class="mi">2</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;usage: ./bcleaner.rb dst_path src_path</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$dst</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="vg">$src</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="no">Dir</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="vg">$src</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="no">Dir</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="vg">$dst</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;No such Directory&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="vg">$src</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;..&quot;</span><span class="p">,</span> <span class="s2">&quot;.DS_Store&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="vg">$src</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;..&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="s2">&quot;%s is empty!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="vg">$src</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="no">Dir</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="vg">$dst</span> <span class="o">+</span> <span class="s2">&quot;/purchased&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="vg">$dst</span> <span class="o">+</span> <span class="s2">&quot;/purchased&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="vg">$src</span><span class="p">)</span>
</span><span class='line'><span class="vg">$hit</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="vg">$src</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">x</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;(&#39;</span> <span class="o">&amp;&amp;</span>  <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;（&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vg">$hit</span>
</span><span class='line'>            <span class="n">y</span> <span class="o">+=</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="vg">$hit</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span> <span class="o">||</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;）&#39;</span> <span class="o">||</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>                <span class="vg">$hit</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="vg">$hit</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>                    <span class="n">y</span> <span class="o">+=</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;.azw3&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">x</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;.mobi&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">include?</span><span class="s2">&quot;_B00&quot;</span>
</span><span class='line'>            <span class="no">File</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="vg">$dst</span> <span class="o">+</span> <span class="s2">&quot;/purchased/&quot;</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>            <span class="no">File</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="vg">$dst</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<p>Ruby很有特色的一个地方就包括它的字符串处理，它不用像C语言一样来考虑内存管理，程序员也不必要担心字符串占用的内存空间[1].<br>
比如可以直接这样给一个字符串赋值:<br>
str = “we” + “ are” + “ a&#8221; + “ whole”<br>
str2 = 2 * str<br>
此时str2是&#8221;we are a whole we are a whole&#8221;<br>
妈妈说，再也不用担心用strcpy还是strncpy了&#8230;</p>


<p>另外一个有特色的地方是Ruby对于中文字符的支持，我们知道在UTF-8编码下一个汉字是占用3个字节，这可以很容易的用C语言来验证：printf(&#8220;%d\n&#8221;, strlen(&#8220;你好&#8221;)) 显示的结果是6。但是，在Ruby里面，printf(&#8220;%d\n&#8221;, &#8220;再见&#8221;.length)的结果是2，即它显示的是字数而不是字节数，这也是Ruby对中文支持很好的地方，或许是因为松本行泓先生是日本人的缘故吧。所以对于str = &#8220;你好&#8221;而言，在Ruby里面str[0]是&#8221;你&#8221;；而在C语言里面，str[0]则只是&#8221;你&#8221;的第一个字节。</p>




<p>看起来确实是挺酷的吧&#8230;</p>




<p>在执行完这个程序后，这些书就按照我的预期整理好了。但是，等等，让我们打开其中的书试试看。当我打开从网上下载的书时，一点问题都没有，然而当我打开从Amazon上买的书时，结果：<br>
<img src="http://laoar.github.io/images/ruby.png">
</p>


<p>&hellip;&hellip;</p>

<p> 哈哈哈哈哈哈&#8230;</p>


<p> 所以说，备份很重要～</p>


<p>[1] <a href="http://guides.ruby.tw/ruby/strings.html">guides.ruby</a><br>
[2] 进来事情有些多，所以直到这个月最后一号才写这篇文章，写的也有些赶。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[进击的C程序员, Ruby, 豆瓣读书]]></title>
    <link href="http://laoar.github.io/blog/2014/07/13/jin-ji-de-ccheng-xu-yuan/"/>
    <updated>2014-07-13T14:04:50+08:00</updated>
    <id>http://laoar.github.io/blog/2014/07/13/jin-ji-de-ccheng-xu-yuan</id>
    <content type="html"><![CDATA[<p>我接触编程较晚，从进入大学后才开始。所以我对那些大器晚成的运动员很有好感，比如迭戈•米利托、里克尔梅、诺维茨基、纳什、刘昌赫，所谓榜样的力量。当然这不是说我不喜欢梅西、科比、李昌镐。</p>


<p>我工作后一直都在做底层相关开发，电子线路，总线协议，CPU设计，BIOS(Bootloader)，System(OS，Compiler)，网络，可以说是从硬件到CPU再到OS再到网络一步步往上走的过程。所以目前为止我所使用的语言主要是C，其次是汇编，X86，ARM，MIPS这些芯片的手册也是翻来覆去的看。后来我进入了现在所在的外企，个人时间相对多了一些，所以我也在思考要不要在业余时间做点什么，我不想一辈子就停留在C上。C语言是一切编程语言的基础，没人愿意一辈子停留在基础上。</p>


<p>在2013年的元旦(那会我还在上一家比较辛苦的公司，没有个人时间，也没有多余精力)，我写完了自己的<a href="http://laoar.net/blogs/227/"ll”>年终总结</a>，然后给小儿看。小儿问我，你看的电影是怎么统计成一个表格的？我说，我手动一个个记录啊。小儿：切，我还以为你有什么高效的方法的哪&#8230; 于是我意识到了我的这种做法是多么的愚蠢，我写软件的目的是什么，不就是为了更方便更高效吗，我为什么不能写个程序来自动统计而非得一个个的机械化的去记录？这个时候我就萌生了要自己做点东西的想法，当然由于拖延症以及确实没有个人时间，导致我只是在心里有这个想法，一直没有去做。</p>


<p>在接着我就进入了这家外企。在有一次周例会上，一个编程牛人同事给我们介绍了各种各样的语言，看的我眼花缭乱头昏脑胀，这些语言我一个都不会写。榜样的力量是强大的，既然他可以做到，我为什么不能做到？所以我就买了本《七周七语言》来看。</p>


<p>《七周七语言》这本书里面提到了Ruby，里面有句话说，Ruby特别适合写爬虫程序。这句话一下子触动了我，从豆瓣上统计自己看过的电影不就是一个爬虫程序吗？我心里一阵激动，这个时候已经到了2013年底。</p>


<p>接着我就买了《代码的未来》和《松本行泓的程序世界》这两本书，看完这两本书，已经到了2014年中旬。</p>


<p>看《松本行泓的程序世界》的过程中，我又粗略翻了下《Programming Ruby》这本书。看完后我就撸起袖子开始写这个爬虫程序了。在写这个爬虫程序前，我不知道html是什么，也不知道css是什么，更不用说javascript，正所谓无知者无畏，我就这么开始写了。就一个周末的时间，我竟然写出来了，当然我写的是爬自己读过的书，而不是看过的电影，因为读书会显得自己逼格高一点，而看电影每个人在无聊的时候都会做。</p>


<p>在折腾html、Ruby的过程中，我又顺便把自己的博客系统由wordpress改为了octopress。在弄这个octopress的时候确实是两眼一抹黑，因为什么都不懂嘛。好在我懂得使用grep，比如我想把那个Google搜索按钮给去掉，于是我就grep -r &#8220;oogle.com&#8221; * &#8211;color，因为知识是相通的，这个Google按钮一定是去访问了google.com,而它一定是存在某个文件里面，那么我就一定能找到它在哪个地方，然后就一定能修改它。正是凭借着grep，我把octopress给摸了个大概，然后把主题改的挺个性化，虽然看起来不好看。如果有人问我，linux相比windows最大的优点是什么，我会毫不犹豫的回答，“grep”。grep就像是知识海洋里的百度地图，百度地图在手，在任何陌生地方都能通行无阻。它再配合xargs，真的是自学利器。</p>


<p>再来看这个爬虫程序。其实它所做的就是解析html格式的文件，就像是linux系统里对elf文件的反汇编一样。只要熟悉了它的文件格式，剩下的无非就是找到这个文件（uri表示的文件）、打开、按照一定规则去解析、再友好的输出解析结果。还是那句话，知识总是相通的，学会了一个自然能够举一反三。</p>


<p>打开uri的过程涉及到一点http知识。当我们在浏览器里面输入一个网址，敲下enter键，实际上是相这个网址所对应的服务器端发送了一个http请求，然后服务器端把我们请求的这个文件压缩分包加密后再传送到我们的浏览器，我们的浏览器再把这些包解密合并解压然后呈现给我们一个网页。一个网页其实就是一个文件，万物皆为文件，这就是linux的思想。</p>


<p>写完了这个<a href="https://github.com/laoar/bookwall"ll”>爬虫程序</a>，然后把自己读过的书的封面放在博客的<a href="http://laoar.net/read/"ll”>一个页面</a>里面，就像一个照片墙，所以我给自己的这个程序取了个名字叫做BookWall。虽然做的过程很折腾，可是花点心思毕竟也做出来了，当然这对于web程序员而言是小菜一碟。然后我就在想，接下来我再折腾点啥？学习下html5/css3，把自己的博客弄的酷炫狂拽屌炸天一些，或者，搞个WebApp，一键来统计自己在所有网站（比如豆瓣，微博，知乎，github，linkedin，goodreads，quaro，last.fm）上的活动记录，跟大数据一样。首先我得想想用什么语言合适，然后开始慢悠悠的看上几本书，再开始动笔&#8230;</p>


<p>从13年元旦开始有这个想法，到14年中旬才完成。这实在难以称得上是进击，所以标题叫做“患有拖延症的C程序员，Ruby，豆瓣读书”更合适一些。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能优化，要懂点编译原理]]></title>
    <link href="http://laoar.github.io/blog/2014/06/24/ldscript/"/>
    <updated>2014-06-24T22:08:21+08:00</updated>
    <id>http://laoar.github.io/blog/2014/06/24/ldscript</id>
    <content type="html"><![CDATA[<h4><center>前言一</center></h4>


<p>现在正处在世界杯小组赛的阶段，我通常都是10点钟早早睡觉，然后爬起来看完12点场的比赛再睡觉，或者，早起看6点场的比赛然后冲个澡去上班。今晚为了写这篇文章，就不打算早睡了，直接看完12点场的比赛再睡觉。</p>

<h4><center>前言二</center></h4>


<p>我不是想说gcc的-O选项，诚然它很强大，不过gcc manual已经说的很清楚了<a href="https://gcc.gnu.org/onlinedocs/gcc-4.8.1/gcc/Optimize-Options.html#Optimize-Options" title="Title">
Gcc-Optimize-Options</a></p>

<h4><center>前言三</center></h4>


<p>在我上大学的时候，我买了本《编译原理》，盗版的，这应该是我这一生买的最后一本盗版书。那本书我翻了几页就没继续往下看，因为纸张看着实在是太不舒服了。后来工作后，我从amazon上买了本正版的，纸张确实好很多，不过还是看不下去，原因嘛，你懂的~</p>

<h4><center>正文</center></h4>


<p>可执行文件的内存布局对程序性能的影响是非常巨大的，因为我最近一直在做性能优化，对这方面感触颇深。要搞明白可执行文件的内存布局，就必须得了解编译原理，当然编译原理实在是太过于高深了，我所知也是皮毛，所以我就从最实用的地方开始入手一点点的分析。</p>


<p>就从我前文里提到的__attribute__((section(&#8220;.sec_name&#8221;)))来说起吧，因为我使用这个东西确实给我们的性能带来了一定的提升。 </p>


<p>关于attribute section这个东西，你要google的话，能够搜索出来不少前人的分析，不过实在都是大同小异，你抄我来我抄你，毫无营养。在他们的博客里，无非是说，“将作用的函数或者数据放入指定名为‘.sec_name’ 的输入段”，然后再巴拉巴拉一通什么是输入段，说的你云里雾里一头雾水分不清东西南北顿觉高大上。</p>


<p>那我们就来看下attribute section到底是什么。</p>


<p>要知道attribute section, 就要先理解链接脚本。链接脚本即链接器在把.o文件链接成最后的elf文件所遵循的规则，也就是，最终的可执行文件是什么样子的是由这个链接脚本决定的。链接脚本的语法和C语言很类似，我们能够很容易读明白，所以从链接脚本来入手分析这个东西会更清晰一些。对应于 __attribute__((section(&#8220;.sec_name&#8221;)))这句话，它在链接的时候采取的默认规则是：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="n">sec_name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">sec_name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
即把.sec_name指向的内容放在.sec_name这个段里面。我们再来稍微清晰化一些，下面举个例子。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>  <span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.in_name&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>  <span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.in_name&quot;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>
我们使用attribute section来声明了两个函数，然后我们在链接脚本里面做如下约束：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="n">out_name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">in_name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
这样就把foor(),bar()这两个函数给放在了最终elf文件里的.out_name这个section。而如果我们不再链接脚本里做这个约束，那么它在链接过程中就会采用默认规则，即输入段和输出段的名字是一样的：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="n">in_name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">in_name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</p>




<p>总结起来就是，__attribute__((section(&#8220;.in_name&#8221;)))的作用是把.in_name指向的符号给放在一起。</p>


<p>唔~ 仍然有点模糊是不？ 那就好好读读《linkers and loaders》或者《程序员的自我修养》这两本书吧。</p>




<p>然后我们来看下linux内核对于attribute section的应用， 以linux kernel的链接脚本vmlinux.lds为例。先来看下linux kernel最终镜像的代码段是如何规划的。</p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="p">.</span> <span class="o">=</span> <span class="n">VMLINUX_LOAD_ADDRESS</span><span class="p">;</span>
</span><span class='line'>     <span class="cm">/* read-only */</span>
</span><span class='line'>     <span class="n">_text</span> <span class="o">=</span> <span class="p">.;</span>     <span class="cm">/* Text and read-only data */</span>
</span><span class='line'>     <span class="p">.</span><span class="n">text</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">TEXT_TEXT</span>
</span><span class='line'>          <span class="n">SCHED_TEXT</span>
</span><span class='line'>          <span class="n">LOCK_TEXT</span>
</span><span class='line'>          <span class="n">KPROBES_TEXT</span>
</span><span class='line'>          <span class="n">IRQENTRY_TEXT</span>
</span><span class='line'>          <span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">.</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>          <span class="o">*</span><span class="p">(.</span><span class="n">fixup</span><span class="p">)</span>
</span><span class='line'>          <span class="o">*</span><span class="p">(.</span><span class="n">gnu</span><span class="p">.</span><span class="n">warning</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span> <span class="o">:</span><span class="n">text</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上就是一个典型的linux kenrel链接脚本的代码段部分。稍微解释下。
. = VMLINUX_LOAD_ADDRESS;的意思是说，此处的地址是VMLINUX_LOAD_ADDRESS，接着又把该值赋给了_text，也就是内核代码段的其实地址是VMLINUX_LOAD_ADDRESS，就这就开始了代码段。在代码段里面我们可以很明显的看到它划分了TEXT_TEXT、SCHED_TEXT、LOCK_TEXT、KPROBES_TEXT、IRQENTRY_TEXT，这样划分的目的，就是为了合理规划地址空间以提升性能。我们可以看下这几个宏到底表示什么：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define TEXT_TEXT                                   \</span>
</span><span class='line'><span class="cp">          ALIGN_FUNCTION();                         \</span>
</span><span class='line'><span class="cp">          *(.text.hot)                              \</span>
</span><span class='line'><span class="cp">          *(.text)                              \</span>
</span><span class='line'><span class="cp">          *(.ref.text)                              \</span>
</span><span class='line'><span class="cp">     MEM_KEEP(init.text)                              \</span>
</span><span class='line'><span class="cp">     MEM_KEEP(exit.text)                              \</span>
</span><span class='line'><span class="cp">          *(.text.unlikely)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SCHED_TEXT                                   \</span>
</span><span class='line'><span class="cp">          ALIGN_FUNCTION();                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__sched_text_start) = .;               \</span>
</span><span class='line'><span class="cp">          *(.sched.text)                              \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__sched_text_end) = .;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define LOCK_TEXT                                   \</span>
</span><span class='line'><span class="cp">          ALIGN_FUNCTION();                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__lock_text_start) = .;               \</span>
</span><span class='line'><span class="cp">          *(.spinlock.text)                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__lock_text_end) = .;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define KPROBES_TEXT                                   \</span>
</span><span class='line'><span class="cp">          ALIGN_FUNCTION();                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__kprobes_text_start) = .;          \</span>
</span><span class='line'><span class="cp">          *(.kprobes.text)                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__kprobes_text_end) = .;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define IRQENTRY_TEXT                                   \</span>
</span><span class='line'><span class="cp">          ALIGN_FUNCTION();                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__irqentry_text_start) = .;          \</span>
</span><span class='line'><span class="cp">          *(.irqentry.text)                         \</span>
</span><span class='line'><span class="cp">          VMLINUX_SYMBOL(__irqentry_text_end) = .;</span>
</span></code></pre></td></tr></table></div></figure>
这些宏其实就是定义了一些input section， 比如.text.hot等。</p>


<p>接着以.sched.text为例来看看到底是怎么用的。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define __sched          __attribute__((__section__(&quot;.sched.text&quot;)))</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">__sched</span> <span class="n">notrace</span> <span class="nf">preempt_schedule_context</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__sched</span> <span class="nf">__schedule</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__sched</span> <span class="nf">schedule</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__sched</span> <span class="nf">schedule_user</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">__sched</span> <span class="nf">schedule_preempt_disabled</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__sched</span> <span class="n">notrace</span> <span class="nf">preempt_schedule</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="n">asmlinkage</span> <span class="kt">void</span> <span class="n">__sched</span> <span class="nf">preempt_schedule_irq</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>
一目了然了吧？ 就是前面我们说的attribute section这个东西，内核就是使用了这个东西来规划地址空间，将相互关联的代码给放在一起，以达到提升性能并保持稳定的作用。 </p>




<p>因为松柏公司的性能受代码check-in影响波动较大，所以我就想到了使用linux kernel的这种做法来规划可执行文件的地址空间，按照不同模块来划分不同的section，这样来避免频繁code check-in对性能波动的影响。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="n">text</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">module_a</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">module_b</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">module_c</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</p>


<p>其实，再稍微的深入思考下，我们就能发现一个更细粒度的控制，那就是控制函数在可执行文件里的先后顺序。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>  <span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.in_name.1&quot;</span><span class="p">)));</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>  <span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.in_name.2&quot;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'> <span class="p">.</span><span class="n">text</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">in_name</span><span class="mf">.1</span><span class="p">)</span>
</span><span class='line'>     <span class="o">*</span><span class="p">(.</span><span class="n">in_name</span><span class="mf">.2</span><span class="p">)</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
这样做之后，在可执行文件里，foo就会在bar的前面，及foo和bar的地址紧挨着，bar紧跟在foo的后面。</p>


<p></p>

<p>我们在缩小一下我们的视角，从宏观上来看下这个链接脚本。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="p">.</span><span class="n">text</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">.</span><span class="n">data</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">.</span><span class="n">bss</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
这也是为什么可执行文件的内存布局先是代码段，接着数据段，再是bss段的原因，即链接脚本决定可执行文件的内存布局。在linux／freebsd机器上运行“ld —verbose”就可以获得ld使用的默认链接脚本。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Github!]]></title>
    <link href="http://laoar.github.io/blog/2014/05/25/hello-github/"/>
    <updated>2014-05-25T21:08:29+08:00</updated>
    <id>http://laoar.github.io/blog/2014/05/25/hello-github</id>
    <content type="html"><![CDATA[<p>Hi there all:</p>

<p>博客服务器由国外收费服务器迁移到github上，博客管理工具由wordpress转向octopress，这样显得Geek些。</p>

<p>Thanks<br>
<font color=blue>@laoar</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能优化：一些很有意思的尝试]]></title>
    <link href="http://laoar.github.io/blogs/501"/>
    <updated>2014-05-24T00:00:00+08:00</updated>
    <id>http://laoar.github.io/blogs/501</id>
    <content type="html"><![CDATA[<p>Cliff跟我说，做性能优化就得花时间去琢磨，<wbr />你要天天琢磨这个事，慢慢的就能找到办法了。 Boss的相对宽容，就给了我足够的时间来做一些琢磨（<wbr />一开始写的是研究，想着自己也不是啥科学家，<wbr />研究这个词还是太高大上了），<wbr />我也得以能够做一些实验来证明自己的想法。<br />
我在前一篇博客里也说过，<wbr />关于性能优化的经验文章可谓汗牛充栋数不胜数，<wbr />然而这一类的文章大多数都是纸上谈兵，纯理论派，<wbr />实际操作性太差。所以我就说下我的实际操作经验，<wbr />这些操作经验在理论派达人眼里可能是小儿科，<wbr />远不及他们指点江山挥斥方遒的派头，<wbr />然而实用的终究要比花拳绣腿好。<br />
因为有些东西我还没有想明白，<wbr />所以这篇博客可能最终没有真正的结论，只有实际的效果。<wbr />仅举几个有趣的例子。<br />
某松柏公司的版本管理方案大致是下面这个这个样子，<wbr />首先有一个主线版本，在每个迭代的开始会拉出一个开发分支，<wbr />开发分支开发完毕再sync到主线，<wbr />然后再从主线拉出一个发布分支做版本发布。注：<wbr />开发分支主要是针对一些大的特性的改动，一些bug fix可能只是commit到主线，<wbr />而不会commit到开发分支。<br />
对于开发分支，会定期有一些sanity check，即做一些测试来监控开发版本的一些指标，<wbr />比如性能指标。主线由于相对稳定，因而就没有这些sanity check。<br />
开发分支由于有daily build的性能测试，因而能够及时的发现问题，<wbr />所以它的性能状况一向都比较良好。<br />
于是问题就来了。最近再把开发分支sync到主线，<wbr />然后从主线拉出来一个发布分支后，发布分支的性能非常之低。 比如开发分支的UDP吞吐量是900Kpps，<wbr />发布分支的UDP吞吐量竟然下降到了780Kpps，<wbr />版本经理的预期是要达到850Kpps，<wbr />因而我需要找出来为什么性能下降这么大，<wbr />以及怎么样来提升它的性能。<br />
理论派达人如果过来指点下江山的话，可能会说，<wbr />用profile工具来比较性能较好（开发分支）和性能很差（<wbr />发布分支）的两个image，看看他们的关键路径上有什么差异，<wbr />先找出差异来，再做调整。 但是，实际情况是，性能差异这么巨大，<wbr />很大的可能性不是由于critical path的代码改动导致的，<wbr />而是由一些无关痛痒的代码改动导致cache的sensitiv<wbr />e。 如果花时间的话，这种想法也的确可行，<wbr />然而最终效果总是看起来很美实际上只是老大爷打太极有板有眼就是<wbr />敌不过一双拳。<br />
再稍微务实一点的想法是，<wbr />我们找到主线分支上性能较好的一个revision，<wbr />然后利用二分查找法来找出是不是由于某个check－<wbr />in导致的。这里的难点在于，首先，<wbr />代码的性能变化是一个波浪型的曲线，<wbr />你没有办法来确认你找到的性能较高的revision是一个合理<wbr />的revision。这种想法更务实一点，<wbr />花费的时间可能也会很多。<br />
更务实一点的想法是，我们找出哪些代码只commit到了主线（<wbr />性能较低）而没有commit到开发分支（性能很好），<wbr />那么性能下降必然是由这些check－in导致的。难点在于，<wbr />每天的代码的check－in少则有4、5个，多则有十几个，<wbr />这个比较也是一个吃力不讨好的事。<br />
所以，我们玩点有技术含量的吧，比较二进制！ 坦白说，在我打算这么做的时候，我不知道结果会怎么样，<wbr />也不知道能不能搞定，反正当时心一横，管它哪，干吧！<br />
于是，<wbr />我将开发分支和发布分支的两个image的符号表给dump出来<wbr />，然后由低地址到高地址sort排序。 大致命令如下：<br />
objdump -t image1.elf | sort &gt; iamge2.sym<br />
objdump -t image2.elf | sort &gt; image2.sym<br />
vim -d iamge1.sym image2.sym<br />
然后我痛苦的发现，这两个符号表竟然有10多万个差异。 这要是一个个的去查，那得查到天荒地老了。<br />
然而这些差异很多都是符号地址的差异，符号的大小基本都一样的。 所以接下来，我就把image1.sym和image2.<wbr />sym的地址这一列给删除再做比较。<wbr />在vim的visual模式下可以按列删除，<wbr />具体请google，此处不缀述。<br />
然后问题就稍微简化了些，很快就找到了一个值得怀疑的地方，<wbr />如下图。（为了不泄漏某松柏公司的信息，我对图片做了些处理。<wbr />虽然这些信息可能也无关紧要，不过做人要职业些嘛）<br />
<img src="http://laoar.github.io/images/501.jpg"></p>
<p>我们可以看到深蓝色的那一行就是两个的差异，<wbr />该符号的大小由0x910增大到了0xaa8，<wbr />共增加了102条指令。于是我验证了下，<wbr />果然是这个差异导致的性能由900Kpps下降到了780Kpp<wbr />s。<br />
既然知道了是哪里导致性能下降的了，问题就简单了，<wbr />肯定是有办法来解决的。<br />
不过我要说的，到这里并没有结束，接下来才是关键。事实上，<wbr />这个符号在data path里并不会执行到，也就是说，<wbr />UDP的吞吐量根本就不会执行这个函数，<wbr />但是这个函数的改动又切切实实的导致了性能的下降。<wbr />唯二的可能性就是a)这个符号的改动影响了后续符号的地址，<wbr />导致一些cache line对齐问题，b)这个符号的改动使得critical path里面的函数／数据出现了cache line的冲突。然而由于符号的差异确实太多了，<wbr />而且critical path里面的函数和数据也很多，<wbr />所以我没有太多的时间和精力来查找到底是哪个原因。<wbr />对于b这种可能性相对好验证一些，只要知道了cache line的大小，和组相连的set，就能够知道cache line冲突的单位是set*line_size, 然后以这个值为基本单位来比较相差这个大小的符号即可。<wbr />对于情况a，可能就不太好验证了，因为要排查的东西太多了，<wbr />时间不允许，不过对于这种情况，我们可以有一些预防措施，<wbr />比如使用__attribute__(signed(128))<wbr />来将一些大的数据结构cache line对齐。注意我们将大数据结构cache line对齐并不是说对齐可以提高访问速度，oh god，如果你这么想那就真的是太悲哀了，<wbr />RISC的访问必须是对齐访问，<wbr />CISC的访问可以不对齐访问多花一个cycle。<wbr />这里所说的cache line对齐，是指，避免这个大数据结构占用多个cache line，比如如果这个大数据结构是136字节，<wbr />不对齐的话它完全是有可能占用3个cache line的（假设cache line的大小是128字节），而对齐的话只需要2个cache line。接下来如果我有充足的时间的话，<wbr />我会继续深入的做一下这件事的琢磨，看看能不能发现一些东西。<wbr />当然也可能花费很多时间什么都做不出来。<br />
事情到这里还没有结束。我们还得再琢磨琢磨。<br />
我们也看到了，<wbr />这明显是无关代码改动导致关键路径性能下降的例子，<wbr />那么我们为何不将关键路径，<wbr />或者说主要功能的代码给放到符号地址空间的前面，<wbr />而将这些次要功能或者说不是很重要的代码给放到后面，<wbr />这样这些无关代码的改动就不会太明显的影响了关键路径了。<wbr />这也说明，对于大型软件系统而言，<wbr />合理的划分地址空间是多么的重要，<wbr />不然以后就只能疲于奔命的去解决这些很无奈的问题了。<br />
合理的划分地址空间，就设计到Makefile／<wbr />链接脚本的设计。这些也不是一个想当然的事，<wbr />而是要根据具体情况来做。 在设计大型软件之初，也不必要去过多的关注这方面，<wbr />等到需要改变的时候再去改变也不迟，毕竟，高司令也教导我们，“<wbr />过早优化是万恶之源”。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能优化，从linux内核里来学习，和一个例子]]></title>
    <link href="http://laoar.github.io/blogs/482"/>
    <updated>2014-04-29T00:00:00+08:00</updated>
    <id>http://laoar.github.io/blogs/482</id>
    <content type="html"><![CDATA[<p style="padding-left: 30px;"></p>
<p>    我对“案例”这个词比较反感，所以标题是“一个例子”。 “案例”这个词，就跟“拉通”、“沟通”、“跟产品PK”、“奋斗者”、“客户”一样，在我眼里属于洗脑文化，所以我比较忌讳使用这些词。使用“例子”、“员工”、“customer”这些词(很抱歉我不知道“拉通”、“沟通”、“和产品PK”是什么意思，因而找不到对应的词，还好我生活和工作中也不会用到这些词)会让我更舒服一些。<br />
<p style="padding-left: 30px;"></p><br />
    对于性能优化，相信稍微懂点编程的人都能说出个二五六来。比如对于inline的使用，只要是会写C语言，相信你一定能够口若悬河滔滔不绝的说出一大坨一大坨inline的优劣以及对性能的影响，然而这一大坨一大坨的经验都是bullshit，一切要看结果怎么样（我心里忽然不由自主的冒出了“以结果为导向”这个词，oh god，愿上帝拯救我）。就像木心在《文学回忆录》说的，“思想过剩的人，行动力往往较差”，关于性能优化这件事也是这样，不要迷信前人的经验，要自己动手去做。注意“迷信”的前提是了解，你要去了解他们的说法，但是不要去相信他们。<span style="line-height: 1.5em;">   </span></p>
<p><span style="line-height: 1.5em;">    再来看inline这个问题，有个哥哥根据自己的实验发现，</span><span style="text-decoration: underline;"><a href="https://lwn.net/Articles/82494/">在skbbuff里面的一些skb__函数都不应该使用inline，因为去掉这些inline后能够提升3%的性</a>能</span><span style="line-height: 1.5em;">。所以说，这些想当然的经验都是bullshit，一切要看实际结果，写代码时不要傻逼兮兮的一上来就到处加inline，毕竟高司令也说过，“过早优化是万恶之源‘。</span><br />
<p style="padding-left: 30px;"></p><br />
    当然我要说的例子不是这个inline的例子。<br />
<p style="padding-left: 30px;"></p><br />
    我们知道Linux Kernel跟GNU是密切联系的，所以在Linux Kernel里面到处可见GCC的一些优化手段，比如GCC的attribute这个东西。《GNU/Linux Application Programming》的作者Tim Jones在他的文章《GCC hacks in Linux Kernel》里对GCC的这些手段做了些总结，写的也挺好。不过这个老兄忽略了一个很重要的东西，__attribute__((section(&#8220;name&#8221;))). 如果你要是写过内核驱动或者做过内核启动的话，你应该对__attribute__((section(&#8220;.init.text&#8221;)))不会陌生，没错他就是__init这个宏。__init这个宏的作用是，Gcc会把这个函数放在.init.text的输入段给链接器，这样所有以__init来声明的符号都会放在.init.text这个section里面。然后在初始化完毕，这些初始化代码显然就不会再执行了，那么他们占用的内存就可以被释放掉，所以在kernel初始化结束会调用一个free_initmem()函数来释放所有位于.init这个section的函数。<br />
<p style="padding-left: 30px;"></p><br />
    不过可惜的是，由于释放的是代码段的页表，因而必须得在内核里面来做，而且内核也没有提供这样的系统调用给用户态 ，对于用户态而言就没有办法来这样处理。事实上有很多用户态程序的初始化代码也很大，几百KB的初始化代码也是很正常的，释放这部分空间也是很可观。不清楚内核开发者为什么不考虑将这个方法以一个系统调用的形式导出到用户态。即提供这样一个系统调用：<br />
int free_inittext(unsigned long start, unsigned long end);<br />
释放页表要求是页对齐，这部分工作可以在内核里面进行检查，并将start向后对齐，以及end向前对齐，该系统调用的返回值是实际释放的page数目，如果没有释放就返回负值。<br />
<p style="padding-left: 30px;"></p><br />
    我们已经知道__attribute__((section(“name&quot;)))的作用是将这个函数给放在一起，这样就给我们提供了一个优化思路，我们完全可以将hot function用这种方法给放在一起，来减少icache miss。之所以是将hot function放在一起，而不是将逻辑上顺序执行的代码顺序排放，是因为icache的替换算法是LRU，即最近最少使用。既然是hot function，显然是会经常调用的，那么，我们把经常调用的函数给放在一起，当某一个函数得到执行时就会可能将另外的hot function一并给预取到cache line里面，其实本质上就是利用cpu的指令预取特性，有点类似于likely()；并且由于这个cache line里都是hot instruction，它总是会得到执行，被替换出去的可能性就大大减少，从而提高cache hit rate。这里需要澄清的一点是，当执行到某一个函数的时候，由于cpu不直接跟memory打交道，它会把该函数读取到cache里面再load到寄存器里面去执行，它把函数读取到cache里面时并不是把整个函数给读取到cache里，而是只读取一个cache line。比如我某一个函数它的起始地址是0x40000008, 假设cache line大小是32bytes， 那么我要执行这个函数的时候就会一次性的将0x40000000～0x40000020这部分的指令给读取到cache，某些cpu会有critical设计，即先读取0x40000008开始的4字节（对于32bits的CPU而言，其read path是4字节）读取到cache接下来再读取其余的28bytes。<br />
<p style="padding-left: 30px;"></p><br />
    这里就是我要说的一个例子。我在做性能优化的时候，仅仅是将critical path里的2个函数利用这种方法给放在了一起，就将UDP的throughput给提升了&gt;10%.<br />
<p style="padding-left: 30px;"></p><br />
    然而，我之所以选择这样做也是迫不得已，我更理想的想法是将另外一个函数给定义成inline，然而无奈另外一个函数有多处调用，如定义成inline可能会得不偿失，因为可执行文件的size就会变大了。结果也恰如我所料，将其定义为inline反而导致性能下降。<br />
<p style="padding-left: 30px;"></p><br />
    所以我就想，C语言里面是否应该有这种设计：inline不是用来作为函数定义的限制词，而是作为函数调用的限制词，即我在调用的时候来决定是否将该函数给内嵌过来，而不是在定义该函数的时候限制其为inline。 比如：<br />
<div class='bogus-wrapper'><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">func_c</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_a</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">func_b</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="kr">__inline</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></div></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于struct hack, 优雅的FreeBSD]]></title>
    <link href="http://laoar.github.io/blogs/466"/>
    <updated>2014-03-20T00:00:00+08:00</updated>
    <id>http://laoar.github.io/blogs/466</id>
    <content type="html"><![CDATA[<p style="padding-left: 30px;"></p>
<p>    本来今晚计划去健身的，谁知道正打算去的时候发现背包里只带着运动裤，忘了带跑步鞋了，脚上的Northface鞋实在不适合健身，于是无奈放弃了。然后趁这个机会写点东西。<br />
<p style="padding-left: 30px;"></p><br />
    好了，言归正传。<br />
<p style="padding-left: 60px;"></p><br />
    我们对于struct stack熟知的是下面这种情况。<br />
<img src="http://laoar.github.io/images/466.jpg"><br />
我们定义一个结构体family来记录一个正常家庭的人的年龄，显然对于一个正常家庭来说，爸妈各只有一个，但是孩子有多少就不确定了，所以我们把family的最后一个成员baby定义为了变长数组。对于这种在一个结构体里面最后一个变量是变长数组而且仅有这一个成员是变长数组的情况，我们称之为struct hack。这属于C语言里面的一个trick。<br />
<p style="padding-left: 30px;"></p><br />
    我这边博客要讨论的不是这种情况，我要说的是我在FreeBSD内核里面看到的一个很有意思的代码，也是一种struct的trick。它起的名字是struct __hack, 所以我就联想到了前面的struc hack ：）<br />
<p style="padding-left: 30px;"></p><br />
    在说FreeBSD内核的struct __hack之前，先来说下Linux内核里的do{ }while(0) 。 在我之前一个<a href="http://www.laoar.net/?p=289">blog</a>里，我说了 do{} while(0) 的目的是为了防止悬挂else问题。之所以会出现悬挂else问题，就是因为代码写的不是太规范。所以说，对于if/else,我们还是要尽量写成<br />
<p style="text-align: left; padding-left: 150px;"><br />
if  (…)  {<br />
&#8230;<br />
} else {<br />
&#8230;<br />
}</p><br />
即使里面只有一句话。<br />
<p style="padding-left: 30px;">然后在来看这个struct __hack。</p><br />
<img src="http://laoar.github.io/images/466-2.jpg"><br />
<p style="padding-left: 90px;"></p><br />
<p style="text-align: left;">     任何技术或者技巧的出现都是为了解决一些问题的，那么这里的struct __hack是为了解决什么问题哪？ 其实它是用来告诉程序员这个宏只用作函数声明。我们知道函数声明一般都是下面这个样子：</p><br />
<p style="text-align: left; padding-left: 150px;"><br />
void foobar(void);</p><br />
<p style="text-align: left;">这个宏也是为了模拟这种形式, 当然事实上它仍然是宏定义了一个函数, 这里要模拟，是说，它的函数体在别处。比如：</p><br />
<p style="text-align: left; padding-left: 150px;">TASKQUEUE_DEFINE_THREAD(kqueue);</p><br />
<p style="padding-left: 30px;"></p><br />
    总之，这个小小的细节正体现出了FreeBSD所追求的优雅性.<br />
<p style="padding-left: 30px;"></p><br />
    写完发现字数太少了。所以在歪歪唧唧一些。最近写blog经常中英混杂，貌似好像大概可能也许很多人都讨厌这个样子，不过目测讨厌这样的多半都不是计算机这个行业或者工作中和英语打交道较少的。假如英语真的影响到你的薪水，进而又影响到你的生活质量，显然你也会不自觉的变成这样，无他，赚钱糊口而已。正应了那句话，叫做，屌丝的生活高富帅永远都不懂，只有经历了你才会明白：）<br />
<p style="padding-left: 30px;"></p><br />
    计算机这个东西本身就是美国的，凡事都是原汁原味的好，而且在绝大多数情况下，你面对的只有英文。比如对于一个C编译器的编译错误信息“discards qualifiers from pointer target type”， 如果你要Google一下才知道这是什么错误的话，那么恭喜你，码农的苦逼生活不适合你：）<br />
<p style="padding-left: 30px;"></p><br />
    其实反过来想也是这样。我在的小区附近老外特别多，旁边一个小区住着N多的韩国人。最近楼下新开了一家店，为了招徕老外，显然得起个英文名，它的英文名字叫“Chinese Humberger”，你猜它的中文名叫什么？ 肉夹馍！ 哈哈，很不伦不类，莫名其妙不是。所以说，原汁原味的才是最好的。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[性能优化,关于Profiling]]></title>
    <link href="http://laoar.github.io/blogs/455"/>
    <updated>2014-03-06T00:00:00+08:00</updated>
    <id>http://laoar.github.io/blogs/455</id>
    <content type="html"><![CDATA[<p style="padding-left: 30px;"></p>
<p>    对于大型软件系统而言，可维护性是很重要的一个方面，否则到了最后没人能够搞懂全部的代码那就是一个灾难了。这方面的例子可谓比比皆是，比如华为VRP平台的Linux内核，因为模块间耦合太严重很难升级Linux内核版本，搞到最后实在搞不下去，于是团队解散，投奔中软的RTOS。松本行弘在《代码的未来》这本书里说，开发人员的成本越来越高，机器成本则是越来越便宜，所以我们的编程语言应该要侧重于开发效率和维护效率，而不应该太过于关注性能，至于性能这件事，完全可以通过升级更牛逼的硬件来很轻松的搞定。其实Ruby之父的这个观点在很久之前就被Donald Kunth说过了，“premature  optimization is the root of all evil”。两位大师的观点可谓殊途同归。<br />
<p style="padding-left: 30px;"></p><br />
    Donald Knuth在大多数软件工程师眼里可谓神一般的存在，它的这句名言也一直被码农们牢记在心。 Donald Knuth前辈并不是反对optimization，它只是反对premature optimization，即盲目无意义的优化，optimization应该要针对critical的东西。如何寻找critical的代码，就是一个profiling系统需要做的事情。当然profiling本身也属于可维护性的一部分。<br />
<p style="padding-left: 30px;"></p><br />
    Profiling的本质，是为了充分发挥CPU的能力。现代CPU的体系结构已经很牛逼了，但是相对而言，软件开发语言则没多大进步，再加上软件开发人员水平的良莠不齐，直接的后果就是，CPU的能力没有得到充分利用。虽然说使用更牛逼的CPU更牛逼的内存更牛逼的散热系统可以大幅的提高性能，但是在相同的配置下，比别人有更牛逼的表现不是更好嘛。iPhone和三星Andriod手机的对比不就是很好的证明嘛。<br />
<p style="padding-left: 30px;">现代CPU的流水线体系结构大概是这个样的。</p><br />
<img src="http://laoar.github.io/images/455.jpg"><br />
Instruction Fetch Unit用来从memory中取指令到寄存器中，Decode and Issue Unit则是将指令翻译成CPU能够识别的编码然后发射到Functional Units（比如运算器等等）来执行这些指令，FU的执行结果再放回到寄存器中。 所以一条指令的执行完毕最好的情况下需要4个CPU cycles就可以搞定了。我们都已经知道流水线的原理就是，指令A在FU执行时，指令B在译码准备发射，指令C在被从内存中读取到寄存器中，于是这样就实现了不同指令的并行工作来提高CPU的效率。 CPU的这个设计思想被Unix开发人员学来了，于是就是有了管道（pipe）。再接着Erlang又把管道的原理用在了语言特性上来实现并发编程，最后Golang又把Erlang的管道特性给学了去。这并不是说CPU的设计人员有多么牛逼，而是说，软件开发人员要在CPU设计人员制定的规则下做事才能充分利用CPU的性能。<br />
<p style="padding-left: 30px;"></p><br />
    CPU的这种流水线存在的缺点，或者说，要依赖编程人员水平的地方在于，指令A可能是JUMP D，这样就导致指令B和指令C要被从流水线里面刷出去了，就造成CPU cycle的浪费。 要想避免这种浪费，就要要求程序自身具有很好的分支预测特性，即要充分迎合CPU的这种预测执行的特性。 在Linux内核里面随处可见的likely()/unlikely()就是做这个事情的，likely()/unlikely()是告诉编译器把if/while的代码块是紧挨着前面的代码还是放置到整个函数的最后面（因为if／while的汇编实现本来就是一个jump指令，所以可以把它跳转到任意合适的位置，这优点类似于goto）。因为CPU最后执行的是编译器生成的二进制，而不是我们写的代码，所以一个好的编译器对于程序性能的影响是巨大的。现在的编译器要比程序员聪明的多，它往往能够预测出程序接下来要执行的指令是什么，有时候我们加的likely()/unlikely()可能根本就没有意义甚至适得其反，因为程序员相比编译器而言太蠢了。有一个例子就是real-time Linux Kernel的maintainer Steven Rostedt做的一个统计，他发现内核里面有<a href="https://lwn.net/Articles/419102/">大量误用likely()/unlikely()的地方</a>，其中在<a href="https://lwn.net/Articles/420028/">page_mapping()函数里面的一个unlikely()有39%的概率是错误的</a>，然后这位大神就提交了一个patch把这个unlikely()给去掉了。所以，如果你没有十足的把握，就不要随便使用unlikely()/likely()这俩宏。 不过有一个基本准确的经验就是，在错误处理的分支上加unlikely()大致不会是坏事。比如：<br />
<div class='bogus-wrapper'><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">SIZE</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;malloc&quot;</span><span class="p">);</span> <span class="err"> </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></div></p>
<p>这里的unlikely()在绝大多数情况下都不是有害的，不过，如果这段代码是non-critical的，那么这个unlikely()就是non-sense的，因为在这种情况下它对性能的提升可能近似为0.0000%。即使这段代码真的是critical的话，这个unlikely()并非就有必要去添加，因为编译器在编译的时候自己也能够判断出来。<br />
<p>曾有人对linux kernel里面likely／unlikely的使用情况做过统计，发现unlikely()的使用次数大概是likely()的10倍，就是很多错误处理的分支都加了unlikely()的缘故。</p></p>
<p style="padding-left: 30px;"></p>
<p>对于likely／unlikely的使用的一个基本原则是，只有在critical path里面，我们才去考虑使用它，是否有必要去使用likely／unlikely还需要借助它的反汇编代码来进一步验证。比如，如下两段反汇编是添加了likely和没有添加likely的的对比：<br />
<div class='bogus-wrapper'><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># 1. if (likely($v1 ＝= 0x7fffffff))</span>
</span><span class='line'><span class="mf">20015f</span><span class="n">ec</span><span class="o">:</span>   <span class="mi">8</span><span class="n">c8240ec</span>    <span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">16620</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mf">20015ff</span><span class="mi">0</span><span class="o">:</span>   <span class="mo">00073</span><span class="mi">880</span>    <span class="n">sll</span> <span class="n">a3</span><span class="p">,</span><span class="n">a3</span><span class="p">,</span><span class="mh">0x2</span>
</span><span class='line'><span class="mf">20015ff</span><span class="mi">4</span><span class="o">:</span>   <span class="mi">248</span><span class="n">a0010</span>    <span class="n">addiu</span>   <span class="n">t2</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mi">16</span>
</span><span class='line'><span class="mf">20015ff</span><span class="mi">8</span><span class="o">:</span>   <span class="mo">00</span><span class="n">ea3821</span>    <span class="n">addu</span>    <span class="n">a3</span><span class="p">,</span><span class="n">a3</span><span class="p">,</span><span class="n">t2</span>
</span><span class='line'><span class="mf">20015ff</span><span class="n">c</span><span class="o">:</span>   <span class="n">aca20000</span>    <span class="n">sw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">0</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016000</span><span class="o">:</span>   <span class="mi">8</span><span class="n">ce30014</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016004</span><span class="o">:</span>   <span class="mi">3</span><span class="n">c027fff</span>    <span class="n">lui</span> <span class="n">v0</span><span class="p">,</span><span class="mh">0x7fff</span>
</span><span class='line'><span class="mi">20016008</span><span class="o">:</span>   <span class="mi">344</span><span class="n">bffff</span>    <span class="n">ori</span> <span class="n">t3</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0xffff</span>
</span><span class='line'><span class="mi">2001600</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00</span><span class="mi">804821</span>    <span class="n">move</span>    <span class="n">t1</span><span class="p">,</span><span class="n">a0</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="err">$</span><span class="n">v1</span> <span class="o">!=</span> <span class="err">$</span><span class="n">t3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">goto</span> <span class="mi">20016038</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'><span class="mi">20016010</span><span class="o">:</span>   <span class="mi">146</span><span class="n">b0009</span>    <span class="n">bne</span> <span class="n">v1</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="mi">20016038</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0x4c</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">20016014</span><span class="o">:</span>   <span class="mi">24854074</span>    <span class="n">addiu</span>   <span class="n">a1</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mi">16500</span>
</span><span class='line'><span class="mi">20016018</span><span class="o">:</span>   <span class="mi">24020001</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="mi">2001601</span><span class="n">c</span><span class="o">:</span>   <span class="mf">0000000f</span>    <span class="n">sync</span>
</span><span class='line'><span class="mi">20016020</span><span class="o">:</span>   <span class="n">c083001c</span>    <span class="n">ll</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016024</span><span class="o">:</span>   <span class="mo">00624021</span>    <span class="n">addu</span>    <span class="n">t0</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mi">20016028</span><span class="o">:</span>   <span class="n">e088001c</span>    <span class="n">sc</span>  <span class="n">t0</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">2001602</span><span class="n">c</span><span class="o">:</span>   <span class="mf">1100ff</span><span class="n">fc</span>    <span class="n">beqz</span>    <span class="n">t0</span><span class="p">,</span><span class="mi">20016020</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0x34</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">20016030</span><span class="o">:</span>   <span class="mo">00000000</span>    <span class="n">nop</span>
</span><span class='line'><span class="mi">20016034</span><span class="o">:</span>   <span class="n">ace30014</span>    <span class="n">sw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
</span><span class='line'>                <span class="mi">20016038</span><span class="o">:</span>
</span><span class='line'><span class="mi">20016038</span><span class="o">:</span>   <span class="mi">8</span><span class="n">ce20014</span>    <span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
</span><span class='line'><span class="mi">2001603</span><span class="n">c</span><span class="o">:</span>   <span class="mi">8</span><span class="n">d430010</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016040</span><span class="o">:</span>   <span class="mo">0043102</span><span class="n">b</span>    <span class="n">sltu</span>    <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'><span class="mi">20016044</span><span class="o">:</span>   <span class="mf">1040001f</span>    <span class="n">beqz</span>    <span class="n">v0</span><span class="p">,</span><span class="mi">200160</span><span class="n">c4</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0xd8</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">20016048</span><span class="o">:</span>   <span class="mo">00000000</span>    <span class="n">nop</span>
</span><span class='line'><span class="mi">2001604</span><span class="n">c</span><span class="o">:</span>   <span class="mi">252340</span><span class="n">cc</span>    <span class="n">addiu</span>   <span class="n">v1</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="mi">16588</span>
</span><span class='line'><span class="mi">20016050</span><span class="o">:</span>   <span class="mi">24020001</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="mi">20016054</span><span class="o">:</span>   <span class="mi">70620018</span>    <span class="n">saa</span> <span class="n">v0</span><span class="p">,(</span><span class="n">v1</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016058</span><span class="o">:</span>   <span class="mf">0000000f</span>    <span class="n">sync</span>
</span><span class='line'><span class="mi">2001605</span><span class="n">c</span><span class="o">:</span>   <span class="mi">8</span><span class="n">ce40014</span>    <span class="n">lw</span>  <span class="n">a0</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016060</span><span class="o">:</span>   <span class="mi">8</span><span class="n">d230010</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">t1</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016064</span><span class="o">:</span>   <span class="mo">00</span><span class="mi">83001</span><span class="n">b</span>    <span class="n">divu</span>    <span class="n">zero</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># 2. if (unlikely($t1 == 0x7fffffff))</span>
</span><span class='line'><span class="mi">20016004</span><span class="o">:</span>   <span class="mi">3</span><span class="n">c027fff</span>    <span class="n">lui</span> <span class="n">v0</span><span class="p">,</span><span class="mh">0x7fff</span>
</span><span class='line'><span class="mi">20016008</span><span class="o">:</span>   <span class="mi">344</span><span class="n">bffff</span>    <span class="n">ori</span> <span class="n">t3</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="mh">0xffff</span>
</span><span class='line'><span class="mi">2001600</span><span class="n">c</span><span class="o">:</span>   <span class="mo">00</span><span class="mi">804821</span>    <span class="n">move</span>    <span class="n">t1</span><span class="p">,</span><span class="n">a0</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="err">$</span><span class="n">v1</span> <span class="o">==</span> <span class="err">$</span><span class="n">t3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">goto</span> <span class="mi">200160</span><span class="n">ac</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'><span class="mi">20016010</span><span class="o">:</span>   <span class="mi">106</span><span class="n">b0026</span>    <span class="n">beq</span> <span class="n">v1</span><span class="p">,</span><span class="n">t3</span><span class="p">,</span><span class="mi">200160</span><span class="n">ac</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0xc0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">20016014</span><span class="o">:</span>   <span class="mi">24854074</span>    <span class="n">addiu</span>   <span class="n">a1</span><span class="p">,</span><span class="n">a0</span><span class="p">,</span><span class="mi">16500</span>
</span><span class='line'><span class="mi">20016018</span><span class="o">:</span>   <span class="mi">8</span><span class="n">ce20014</span>    <span class="n">lw</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">20</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
</span><span class='line'><span class="mi">2001601</span><span class="n">c</span><span class="o">:</span>   <span class="mi">8</span><span class="n">d430010</span>    <span class="n">lw</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">16</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
</span><span class='line'><span class="mi">20016020</span><span class="o">:</span>   <span class="mo">0043102</span><span class="n">b</span>    <span class="n">sltu</span>    <span class="n">v0</span><span class="p">,</span><span class="n">v0</span><span class="p">,</span><span class="n">v1</span>
</span><span class='line'><span class="mi">20016024</span><span class="o">:</span>   <span class="mf">1040001f</span>    <span class="n">beqz</span>    <span class="n">v0</span><span class="p">,</span><span class="mi">200160</span><span class="n">a4</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0xb8</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">20016028</span><span class="o">:</span>   <span class="mo">00000000</span>    <span class="n">nop</span>
</span><span class='line'><span class="mi">2001602</span><span class="n">c</span><span class="o">:</span>   <span class="mi">252340</span><span class="n">cc</span>    <span class="n">addiu</span>   <span class="n">v1</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="mi">16588</span>
</span><span class='line'><span class="mi">20016030</span><span class="o">:</span>   <span class="mi">24020001</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">200160</span><span class="n">a8</span><span class="o">:</span>   <span class="mf">2402ff</span><span class="n">ff</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                <span class="mi">200160</span><span class="n">ac</span><span class="o">:</span>
</span><span class='line'><span class="mi">200160</span><span class="n">ac</span><span class="o">:</span>   <span class="mi">24020001</span>    <span class="n">li</span>  <span class="n">v0</span><span class="p">,</span><span class="mi">1</span>  <span class="err">#</span> <span class="err">这是另外一个</span><span class="n">cache</span> <span class="n">line</span>
</span><span class='line'><span class="mi">200160</span><span class="n">b0</span><span class="o">:</span>   <span class="mf">0000000f</span>    <span class="n">sync</span>
</span><span class='line'><span class="mi">200160</span><span class="n">b4</span><span class="o">:</span>   <span class="n">c083001c</span>    <span class="n">ll</span>  <span class="n">v1</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">200160</span><span class="n">b8</span><span class="o">:</span>   <span class="mo">00624021</span>    <span class="n">addu</span>    <span class="n">t0</span><span class="p">,</span><span class="n">v1</span><span class="p">,</span><span class="n">v0</span>
</span><span class='line'><span class="mi">200160</span><span class="n">bc</span><span class="o">:</span>   <span class="n">e088001c</span>    <span class="n">sc</span>  <span class="n">t0</span><span class="p">,</span><span class="mi">28</span><span class="p">(</span><span class="n">a0</span><span class="p">)</span>
</span><span class='line'><span class="mi">200160</span><span class="n">c0</span><span class="o">:</span>   <span class="mf">1100ff</span><span class="n">fc</span>    <span class="n">beqz</span>    <span class="n">t0</span><span class="p">,</span><span class="mi">200160</span><span class="n">b4</span> <span class="o">&lt;</span><span class="n">xxxx</span><span class="o">+</span><span class="mh">0xc8</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">200160</span><span class="n">c4</span><span class="o">:</span>   <span class="mo">00000000</span>    <span class="n">nop</span>
</span></code></pre></td></tr></table></div></figure></div><br />
假设cacheline的大小是128bytes，我们可以看到在第二种情况时，if语句会跳转到另外一个cache line里面，这必然会造成cache miss，如果t1在大多数情况下都是0x7fffffff，那么这里就会有较明显的性能损失。<br />
   <p> 除了这个分支预测之外，还有一个性质对流水线的影响较大，那就是数据依赖。指令B已经译码完成，准备要发出去的时候，发现它的操作数不可用，有可能别的CPU在使用这个操作数，于是指令B只能在这里傻傻的等待另外的CPU释放这个操作数。</p><br />
<p style="padding-left: 30px;"></p><br />
    所以对于流水线型的CPU，主要就这两方面决定着性能的好坏：1）数据依赖 2）分支预测。现在的并发编程也主要是解决的这两件事。<br />
<p style="padding-left: 30px;"></p><br />
    CPU的设计人员为了让程序员能够更直观的感受这两件事的表现，就给程序员提供了一些性能统计的寄存器，这些寄存器都在协处理0里面。他们做的事情，就是统计多长时间cpu cycle内，指令的issue/retire的数目，icache/dcache的hit/miss,以及l2 icache/dcache的hit/miss等等。比如说，如果icache的miss较大，那显然是程序的分支预测较差。<br />
<p style="padding-left: 30px;"></p><br />
    对于应用程序开发人员而言，是没有必要了解这么详细的性能寄存器信息的，或者说在这个上面花费精力意义不大。因而就有了perf、oprofile、systemtap、dtrace这些性能调试工具的应运而生。这些工具提供给程序员更友好的方式来分析程序，借助这些工具能够很直观的找到程序的critical部分。</p>
<p>注：<br />
<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup> 图是用Google Doc画的，第一次使用Google Doc画图，画的不太好:(</p>]]></content>
  </entry>
  
</feed>
